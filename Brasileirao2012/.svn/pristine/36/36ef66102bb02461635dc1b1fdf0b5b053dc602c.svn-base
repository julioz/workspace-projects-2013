package br.com.zynger.brasileirao2012.util;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

import org.xmlpull.v1.XmlPullParserException;

import android.util.Log;
import br.com.zynger.brasileirao2012.HomeActivity;
import br.com.zynger.brasileirao2012.model.Article;
import br.com.zynger.brasileirao2012.model.NewsSource;

public class RSSParser {
	
	private int domain;
	private String site, edited;
	private int numArt;
	private final static int MAX_ART = 18;
	
	public RSSParser(int domain, String url, String encoding) throws XmlPullParserException, IOException{
		setDomain(domain);
		setSiteString(parseWebsiteIntoString(url, encoding));
		numArt = 0;
	}
	
	private void setSiteString(String s) {
		this.site = s;
	}
	
	private void setDomain(int dom) {
		this.domain = dom;
	}

	private String parseWebsiteIntoString(String website, String encoding) throws IOException{
		URL url = new URL(website);
        URLConnection con = url.openConnection();
        InputStream in = con.getInputStream();
        //String encoding = con.getContentEncoding();
        if(encoding == null) encoding = "UTF-8";
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        byte[] buf = new byte[8192];
        int len = 0;
        while ((len = in.read(buf)) != -1) {
            baos.write(buf, 0, len);
        }
		return new String(baos.toByteArray(), encoding);
	}

	public ArrayList<Article> parse(){
		this.edited = this.site;
		ArrayList<Article> al = new ArrayList<Article>();
		try{
			if(domain == NewsSource.PARANAUTAS) al = parseParanautas(al);
			else{
				while(true){
					int pos = edited.indexOf("<item>", "<item>".length()+1);
					if(pos != -1 && numArt < MAX_ART){
						try{
							edited = edited.substring(pos);
						}catch(StringIndexOutOfBoundsException e){
							break;
						}
						Article art = parseArticle();
						al.add(art);
						numArt++;
					}else break;
				}
			}
		}catch (MalformedURLException e) {
			Log.e(HomeActivity.TAG, "RSSParser -> " + e.toString());
			e.printStackTrace();
		}
		return al;
	}
	
	

	private ArrayList<Article> parseParanautas(ArrayList<Article> al) throws MalformedURLException {
		String website = this.edited;
		website = website.substring(website.indexOf("<table width=\"100%\">"));
		
		while(true){
			int indexStart = website.indexOf("<tr valign=\"top\">");
			if(indexStart == -1 || al.size() == MAX_ART) break;
			website = website.substring(indexStart);
			Article art = new Article();
			art.setDomain(Article.PARANAUTAS);
			website = website.substring(website.indexOf("<a href=\"") + "<a href=\"".length());
			String url = "http://paranautas.com/" + website.substring(0, website.indexOf("\">"));
			website = website.substring(website.indexOf(">")+1);
			String pubDate = website.substring(0, website.indexOf(" -"));
			website = website.substring(website.indexOf(" - ") + " - ".length());
			String title = website.substring(0, website.indexOf("<br>"));
			art.setTitle(title);
			art.setPubDate(pubDate.trim());
			art.setUrl(new URL(url));
			
			al.add(art);
		}
		
		return al;
	}

	private Article parseArticle() throws MalformedURLException{
		switch (this.domain) {
		case NewsSource.GLOBOESPORTE:
			return parseGlobo();
		case NewsSource.UOL:
			return parseUol();
		case NewsSource.GOOGLE:
			return parseGoogle();
		case NewsSource.NETFLU:
			return parseNetflu();
		default:
			return null;
		}
	}
	
	private Article parseGlobo() throws MalformedURLException {
		Article art = new Article();
		art.setDomain(Article.GLOBO);
		
		this.edited = this.edited.substring(this.edited.indexOf("<title>") + "<title>".length());
		art.setTitle(this.edited.substring(0, this.edited.indexOf("</title>")));
		
		this.edited = this.edited.substring(this.edited.indexOf("<link>") + "<link>".length());
		art.setUrl(new URL(this.edited.substring(0, this.edited.indexOf("</link>"))));
		
		this.edited = this.edited.substring(this.edited.indexOf("src='") + "src='".length());
		String imgurl = this.edited.substring(0, this.edited.indexOf("'"));
		imgurl = imgurl.replaceFirst("[0-9]+x[0-9]+", "original");
		if(imgurl.equals("http://globoesporte.globo.com")) imgurl = null;
		art.setImgUrl(imgurl);
		
		this.edited = this.edited.substring(this.edited.indexOf("<pubDate>") + "<pubDate>".length());
		art.setPubDate(this.edited.substring(0, this.edited.indexOf("</pubDate>")));
		
		return art;
	}

	private Article parseUol() throws MalformedURLException {
		Article art = new Article();
		art.setDomain(Article.UOL);
		
		this.edited = this.edited.substring(this.edited.indexOf("<title>") + "<title>".length());
		String tt = this.edited.substring(this.edited.indexOf("<![CDATA[")+"<![CDATA[".length(), this.edited.indexOf(" ("));
		String pd = this.edited.substring(this.edited.indexOf(" (")+" (".length(), this.edited.indexOf(") ]]>"));
		art.setTitle(tt);
		art.setPubDate(pd);
		
		this.edited = this.edited.substring(this.edited.indexOf("<link>") + "<link>".length());
		art.setUrl(new URL(this.edited.substring(this.edited.indexOf("<![CDATA[")+"<![CDATA[".length(), this.edited.indexOf("]]>"))));
		
		return art;
	}
	
	private Article parseGoogle() throws MalformedURLException {
		Article art = new Article();
		art.setDomain(Article.GOOGLE);
		
		this.edited = this.edited.substring(this.edited.indexOf("<title>") + "<title>".length());
		art.setTitle(this.edited.substring(0, this.edited.indexOf("</title>")));
		
		this.edited = this.edited.substring(this.edited.indexOf("<link>") + "<link>".length());
		art.setUrl(new URL(this.edited.substring(this.edited.indexOf("url=")+"url=".length(), this.edited.indexOf("</link>"))));
		
		this.edited = this.edited.substring(this.edited.indexOf("<pubDate>") + "<pubDate>".length());
		art.setPubDate(this.edited.substring(0, this.edited.indexOf("</pubDate>")));

		return art;
	}
	
	private Article parseNetflu() throws MalformedURLException {
		Article art = new Article();
		art.setDomain(Article.NETFLU);
		
		this.edited = this.edited.substring(this.edited.indexOf("<title>") + "<title>".length());
		String title = this.edited.substring(0, this.edited.indexOf("</title>"));
		title = title.replaceAll("&#822[0-1];", "\"").replaceAll("&#8211;", "-").replaceAll("&#8230;", "...");
		art.setTitle(title);
		
		this.edited = this.edited.substring(this.edited.indexOf("<link>") + "<link>".length());
		art.setUrl(new URL(this.edited.substring(0, this.edited.indexOf("</link>"))));	
		
		/*art.setImgUrl(urldaimagem);*/
		/*try{
			Document document = Jsoup.connect(art.getUrl().toString()).get();
			Elements els = new Elements();
			for (Element el : document.getAllElements()) {
				if(el.tagName().equals("img")) els.add(el);
			}
			if(els.size() == 1) return null;
			else{
				return els.get(0).attr("src");
			}
		}catch(IOException e){
			return null;
		}*/
		
		this.edited = this.edited.substring(this.edited.indexOf("<pubDate>") + "<pubDate>".length());
		art.setPubDate(this.edited.substring(0, this.edited.indexOf("</pubDate>")));
		
		return art;
	}
}