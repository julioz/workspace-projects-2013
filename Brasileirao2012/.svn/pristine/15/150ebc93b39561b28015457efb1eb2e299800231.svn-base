package br.com.zynger.brasileirao2012.rest;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.TreeMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import br.com.zynger.brasileirao2012.model.Club;
import br.com.zynger.brasileirao2012.model.Match;
import br.com.zynger.brasileirao2012.web.WebServiceClient;


public class MatchesREST {

	private static final String URL_WS = "http://aqueous-oasis-8080.herokuapp.com/services/";

	public TreeMap<Integer, ArrayList<Match>> getMatches(int division, TreeMap<String, Club> clubs) throws Exception {
		String[] resposta = new WebServiceClient().get(URL_WS + "matches/Gdivision=" + division + "/");
		
		if (resposta[0].equals("200")) {
			JSONObject object = new JSONObject(resposta[1]);
			TreeMap<Integer, ArrayList<Match>> tm = new TreeMap<Integer, ArrayList<Match>>();
			
			for (int rodada = 1; rodada <= 38; rodada++) {				
				JSONObject fixture = object.getJSONObject(String.valueOf(rodada));
				JSONArray jsonArray = fixture.getJSONArray("matches");
				ArrayList<Match> al = new ArrayList<Match>();
				for (int j = 0; j < jsonArray.length(); j++) {
					JSONObject obj = jsonArray.getJSONObject(j);
					Match m = parseMatchFromJSON(clubs, rodada, obj);
					al.add(m);
				}
				tm.put(rodada, al);
			}
			
			return tm;
		} else {
			throw new Exception(resposta[1]);
		}
	}
	
	public TreeMap<Integer, Boolean> getFixtureState(int division) throws Exception {
		String[] resposta = new WebServiceClient().get(URL_WS + "matches/Gdivision=" + division + "/fixturestate");
		
		if (resposta[0].equals("200")) {
			JSONObject object = new JSONObject(resposta[1]);
			TreeMap<Integer, Boolean> tm = new TreeMap<Integer, Boolean>();
			
			for (int i = 1; i <= 38; i++) {
				tm.put(i, object.getBoolean(String.valueOf(i)));
			}
			
			return tm;
		} else {
			throw new Exception(resposta[1]);
		}
	}
	
	@SuppressLint("UseSparseArrays")
	public HashMap<Integer, GregorianCalendar> getFixtureDates(int division) throws Exception{
		String[] resposta = new WebServiceClient().get(URL_WS + "matches/Gdivision=" + division + "/dates");
		
		if(resposta[0].equals("200")){
			HashMap<Integer, GregorianCalendar> map = new HashMap<Integer, GregorianCalendar>();
			
			JSONObject object = new JSONObject(resposta[1]);
			for (int i = 1; i <= 38; i++) {
				JSONObject jsonCal = object.getJSONObject(String.valueOf(i));
				GregorianCalendar cal = parseGregorianCalendar(jsonCal);
				map.put(i, cal);
			}
			
			return map;
		}else{
			throw new Exception(resposta[1]);
		}
	}
	
	public ArrayList<Match> getMatches(int division, int rodada, TreeMap<String, Club> clubs) throws Exception {
		String[] resposta = new WebServiceClient().get(URL_WS + "matches/Gdivision=" + division + "/rodada=" + rodada);
		
		if(resposta[0].equals("200")){
			ArrayList<Match> al = new ArrayList<Match>();
			
			JSONArray array = new JSONArray(resposta[1]);
			for (int i = 0; i < array.length(); i++) {
				JSONObject obj = array.getJSONObject(i);
				Match m = parseMatchFromJSON(clubs, rodada, obj);
				al.add(m);
			}

			return al;
		}else{
			throw new Exception(resposta[1]);
		}
	}
	
	private Match parseMatchFromJSON(TreeMap<String, Club> clubs, int rodada, JSONObject obj) throws JSONException{
		Match m = new Match();
		Club home = clubs.get(obj.getString("home"));
		Club away = clubs.get(obj.getString("away"));
		m.setClubHome(home);
		m.setClubAway(away);
		m.setStadium(obj.getString("stadium"));
		m.setScore(obj.getInt("scoreHome"), obj.getInt("scoreAway"));				
		m.setDate(parseGregorianCalendar(obj.getJSONObject("date")));
		m.setFinished(obj.getBoolean("done"));
		m.setRodada(rodada);
		return m;
	}
	
	private GregorianCalendar parseGregorianCalendar(JSONObject jsonCal) throws JSONException{
		GregorianCalendar cal = new GregorianCalendar();
		cal.set(Calendar.YEAR, jsonCal.getInt("year"));
		cal.set(Calendar.MONTH, jsonCal.getInt("month"));
		cal.set(Calendar.DAY_OF_MONTH, jsonCal.getInt("dayOfMonth"));
		cal.set(Calendar.HOUR_OF_DAY, jsonCal.getInt("hourOfDay"));
		cal.set(Calendar.MINUTE, jsonCal.getInt("minute"));
		
		return cal;
	}
	
}
