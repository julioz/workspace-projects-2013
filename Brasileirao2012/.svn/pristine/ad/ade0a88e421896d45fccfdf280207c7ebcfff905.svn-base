package br.com.zynger.brasileirao2012.rest;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.TreeMap;

import br.com.zynger.brasileirao2012.model.AprovData;
import br.com.zynger.brasileirao2012.model.Club;
import br.com.zynger.brasileirao2012.model.Fixture;
import br.com.zynger.brasileirao2012.model.Match;

public class AprovREST {
	
	private static final String URL_WS = "http://aqueous-oasis-8080.herokuapp.com/services/";

	public TreeMap<String, AprovData> getAprov(TreeMap<String, Club> clubs, TreeMap<Integer, Fixture> matches) throws Exception {
		int division = clubs.get(matches.get(1).getMatches().get(1).getHome()).getDivision();
		for (Iterator<Club> it = clubs.values().iterator(); it.hasNext();) {
			Club club = (Club) it.next();
			if(club.getDivision() == division){
				club.setAprov(new AprovData());
			}
		}
		
		for (int i = 1; i <= 38; i++) {
			Fixture fixture = matches.get(i);
			ArrayList<Match> fixtureMatches = fixture.getMatches();
			for (Match match : fixtureMatches) {
				int scoreHome = match.getScoreHome();
				int scoreAway = match.getScoreAway();

				if(scoreHome >= 0 && scoreAway >= 0){					
					AprovData homeAprov = clubs.get(match.getHome()).getAprov();
					AprovData awayAprov = clubs.get(match.getAway()).getAprov();
					homeAprov.setHomePlayed(homeAprov.getHomePlayed() + 1);
					awayAprov.setAwayPlayed(awayAprov.getAwayPlayed() + 1);
					
					if(scoreHome > scoreAway){
						homeAprov.setHomeVictories(homeAprov.getHomeVictories() + 1);
					}else if(scoreHome < scoreAway){
						awayAprov.setAwayVictories(awayAprov.getAwayVictories() + 1);
					}else{
						homeAprov.setHomeDrawn(homeAprov.getHomeDrawn() + 1);
						awayAprov.setAwayDrawn(awayAprov.getAwayDrawn() + 1);
					}
				}
			}
		}
		
		TreeMap<String, AprovData> tm = new TreeMap<String, AprovData>();
		for (Club club : clubs.values()) {
			if(club.getDivision() == division){				
				AprovData aprov = club.getAprov();
				aprov.calcPercs();
			}
			tm.put(club.getName(), club.getAprov());
			
		}
		
		return tm;
	}
	
	
	/*public TreeMap<String, Club> getAprov(int division, TreeMap<String, Club> clubs) throws Exception {
		String[] resposta = new WebServiceClient().get(URL_WS + "aprov/Gdivision=" + division + "/");
		
		if (resposta[0].equals("200")) {			
			JSONObject object = new JSONObject(resposta[1]);
			for (Club club : clubs.values()) {
				if(club.getDivision() == division){				
					JSONObject jsonAprovObj = object.getJSONObject(club.getName());
					AprovData ad = new AprovData();
					ad.setHomePlayed(jsonAprovObj.getInt("homePlayed"));
					ad.setHomeVictories(jsonAprovObj.getInt("homeVictories"));
					ad.setHomeDrawn(jsonAprovObj.getInt("homeDrawn"));
					ad.setHomePerc(Float.valueOf(jsonAprovObj.getString("homePerc")));
					ad.setAwayPlayed(jsonAprovObj.getInt("awayPlayed"));
					ad.setAwayVictories(jsonAprovObj.getInt("awayVictories"));
					ad.setAwayDrawn(jsonAprovObj.getInt("awayDrawn"));
					ad.setAwayPerc(Float.valueOf(jsonAprovObj.getString("awayPerc")));
					
					club.setAprov(ad);
				}
			}
			
			return clubs;
		} else {
			throw new Exception(resposta[1]);
		}
	}*/

}
