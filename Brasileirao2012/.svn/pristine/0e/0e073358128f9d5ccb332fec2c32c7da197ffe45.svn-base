package br.com.zynger.brasileirao2012.rest;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.LinkedHashMap;
import java.util.Set;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.util.Log;
import br.com.zynger.brasileirao2012.model.Match;
import br.com.zynger.brasileirao2012.model.Move;
import br.com.zynger.brasileirao2012.web.JsonUtil;

public class MoveToMoveREST {

	public LinkedHashMap<String, Move> getRealTimeMatchMoveToMove(Context context, Match m) throws JSONException{
		String url = getRealTimeMatchUrl(m);
		Log.e("bras2012", url);
		JSONArray jsonarray = new JSONArray(JsonUtil.readJsonFeed(url));
		LinkedHashMap<String, Move> map = new LinkedHashMap<String, Move>();
		for (int i = 0; i < jsonarray.length(); i++) {
			JSONObject obj = jsonarray.getJSONObject(i);
			try{
				Move move = parseMove(obj);
				map.put(String.valueOf(move.getId()), move);
			}catch(JSONException e){
				Log.e("bras2012", obj.toString());
				e.printStackTrace();
				continue;
			}
		}
		
		LinkedHashMap<String, Move> inverseOrderMap = new LinkedHashMap<String, Move>(); //TODO encontrar um jeito melhor de inverter a ordem do mapa
		Set<String> keySet = map.keySet(); 
		Object[] tempArray = keySet.toArray(); 

		int length = tempArray == null ? 0 : tempArray.length; 
		for(int i = length-1; i >= 0 ; i--){
			Move move = map.get(tempArray[i]);
			inverseOrderMap.put(String.valueOf(move.getId()), move);
		}
		return inverseOrderMap;
	}
	
	public ArrayList<Move> getUpdatedMoves(Context c, String lastId, Match match) throws JSONException{
		String url = getRealTimeMatchUrl(match);
		JSONArray jsonarray = new JSONArray(JsonUtil.readJsonFeed(url));
		ArrayList<Move> al = new ArrayList<Move>();
		for (int i = jsonarray.length() - 1; i >= 0; i--){
			JSONObject obj = jsonarray.getJSONObject(i);
			try{
				Move move = parseMove(obj);
				
				if(move.getOperacao().equals("ALTERACAO")) continue;
				if(String.valueOf(move.getId()).equals(lastId)) break;
				
				al.add(move);
			}catch(JSONException e){
				Log.e("bras2012", obj.toString());
				e.printStackTrace();
				continue;
			}catch(Exception e){
				Log.e("bras2012", obj.toString());
				e.printStackTrace();
				continue;
			}
		}
		return al;
	}
	
	private String getRealTimeMatchUrl(Match m){
		String home = fixRealTimeNames(m.getHome());
		home = home.toLowerCase();
		home = home.replace(" ", "-");
		String away = fixRealTimeNames(m.getAway());
		away = away.toLowerCase();
		away = away.replace(" ", "-");
		
		String day = String.valueOf(m.getDate().get(Calendar.DATE));
		if(day.length() < 2) day = "0" + day;
		
		String month = new String();
		month = String.valueOf(m.getDate().get(Calendar.MONTH)+1);
		if(month.length() < 2) month = "0" + month;
		
		String year = String.valueOf(m.getDate().get(Calendar.YEAR));
		
		String date = day + "-" + month + "-" + year;
		
		if(date.equals("02-00-2013")) date = "02-12-2012"; //TODO gambiarra
		
		return "http://globoesporte.globo.com/temporeal/futebol/" + date + "/" + home + "-" + away + "/mensagens.json";
	}
	
	private String fixRealTimeNames(String original){
		if(original.toLowerCase().equals("atlético-go")) return "Atletico-GO";
		else if(original.toLowerCase().equals("são paulo")) return "Sao Paulo";
		else if(original.toLowerCase().equals("náutico")) return "Nautico";
		else if(original.toLowerCase().equals("atlético-mg")) return "Atletico-MG";
		else if(original.toLowerCase().equals("grêmio")) return "Gremio";
		else if(original.toLowerCase().equals("grêmio barueri")) return "Barueri";
		else if(original.toLowerCase().equals("américa-mg")) return "America-MG";
		else if(original.toLowerCase().equals("goiás")) return "Goias";
		else if(original.toLowerCase().equals("ceará")) return "Ceara";
		else if(original.toLowerCase().equals("américa-rn")) return "America-RN";
		else if(original.toLowerCase().equals("atlético-pr")) return "Atletico-PR";
		else if(original.toLowerCase().equals("criciúma")) return "Criciuma";
		else if(original.toLowerCase().equals("boa esporte")) return "Boa";
		else if(original.toLowerCase().equals("guaratinguetá")) return "Guaratingueta";
		else if(original.toLowerCase().equals("são caetano")) return "Sao Caetano";
		else if(original.toLowerCase().equals("paraná")) return "Parana";
		else if(original.toLowerCase().equals("vitória")) return "Vitoria";
		else if(original.toLowerCase().equals("avaí")) return "Avai";
		return original;
	}
	
	private Move parseMove(JSONObject obj) throws JSONException{
		String operacao = obj.getString("operacao");
		String str_tipo = obj.getString("tipo");
		int tipo = getMoveToMoveTipo(str_tipo);
        String nome_time = obj.getString("nome_time");
		String periodo = obj.getString("periodo");
		String video_id = obj.getString("video_id");
		String url_thumb = obj.getString("url_thumb_playlist");
		int periodo_id = obj.getInt("periodo_id");
		String texto = obj.getString("texto");
		String momento = obj.getString("momento");
		int id = obj.getInt("id");
		
		String video_url = null;
		if(!video_id.trim().equals("")) video_url = getMoveVideoUrl(video_id);
		
		int cartao = Move.CARTAO_NULL;
		try{					
			JSONObject objCard = obj.getJSONObject("cartao");
			if(objCard.getString("tipo").toUpperCase().equals("A")) cartao = Move.CARTAO_AMARELO;
			else if(objCard.getString("tipo").toUpperCase().equals("V")) cartao = Move.CARTAO_VERMELHO;
		}catch(JSONException e){
			cartao = Move.CARTAO_NULL;;
		}
		
		texto = texto.replaceAll("<p>", "");
		texto = texto.replaceAll("</p>", "");
		
		Move move = new Move(operacao, tipo, nome_time, periodo, video_id, url_thumb, periodo_id, texto, momento, id, video_url, cartao);
		return move;
	}
	
	private int getMoveToMoveTipo(String str_tipo) {
		str_tipo = str_tipo.toUpperCase();
		if(str_tipo.equals("LANCE")) return Move.TIPO_LANCE;
		else if(str_tipo.equals("LANCE_IMPORTANTE")) return Move.TIPO_LANCEIMPORTANTE;
		else if(str_tipo.equals("LANCE_CARTAO")) return Move.TIPO_LANCECARTAO;
		else if(str_tipo.equals("LANCE_GOL")) return Move.TIPO_LANCEGOL;
		else if(str_tipo.equals("LANCE_SUBSTITUICAO")) return Move.TIPO_LANCESUBSTITUICAO;

		return Move.TIPO_LANCE;
	}

	private String getMoveVideoUrl(String video_id) {
		String url = "http://api.globovideos.com/videos/" + video_id + "/playlist";
		try {
			JSONObject json = new JSONObject(JsonUtil.readJsonFeed(url));
			JSONArray tmp = json.getJSONArray("videos");
			JSONObject videos = tmp.getJSONObject(0);
			JSONArray resources = videos.getJSONArray("resources");
			for (int i = 0; i < resources.length(); i++) {
				try{
					JSONObject videoObj = resources.getJSONObject(i);
					
					if(videoObj.getString("kind").equals("M4")) return videoObj.getString("url");
					else continue;
				}catch(JSONException e){
					continue;
				}
			}
		} catch (JSONException e) {
			e.printStackTrace();
			return null;
		}
		return null;
	}
}
