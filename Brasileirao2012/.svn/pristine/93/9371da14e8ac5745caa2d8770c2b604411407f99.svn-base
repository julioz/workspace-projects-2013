package br.com.zynger.brasileirao2012.util;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.StreamCorruptedException;

import br.com.zynger.brasileirao2012.model.Club;

import android.content.Context;
import android.util.Log;

public abstract class FileHandler {
	
	private static final String TAG = "brasileirao2012";
	public static final String CLUBS = "bras2012_clubs";
	public static final String MYCLUB = "bras2012_myclub";
	public static final String STRIKERS_A = "bras2012_strikers_a";
	public static final String STRIKERS_B = "bras2012_strikers_b";
	public static final String MATCHES = "bras2012_matches_";
	public static final String VERSION_MATCHES = "bras2012_version_matches_";
	public static final String MATCHES_DATES = "bras2012_matches_dates_";
	public static final String TORCIDOMETER_SENT_CLUB = "bras2012_torcidometer_sent_club";
	public static final String FOLLOWEDREALTIMEMATCH = "bras2012_followedrealtimematch";
	public static final String LASTDATE_UPDATEALL = "bras2012_lastdateupdateall";
	public static final String TESTCONNECTIONVIAHARDWARE = "bras2012_testconnectionviahardware";

	public static void saveBackup(Context c, String fileName, Object obj){
		FileOutputStream out;
		try {
			out = c.openFileOutput(fileName, Context.MODE_PRIVATE);
			ObjectOutputStream os = new ObjectOutputStream(out);
			os.writeObject(obj);
			os.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (NullPointerException e) {
			e.printStackTrace();
		} catch (OutOfMemoryError e) {
			e.printStackTrace();
		} catch (StackOverflowError e) {
			e.printStackTrace();
		}
	}
	
	public static void saveBackup(Context c, String fileName, Object obj, int division){
		String div = (division == Club.PRIMEIRADIVISAO) ? "a" : "b";
		saveBackup(c, fileName + div, obj);
	}
	
	public static void saveClubsDatabaseVersion(Context c, String value){
		saveBackup(c, "clubsdatabase", value);
	}
	
	public static String openClubsDatabaseVersion(Context c){
		String ret = (String) openBackup(c, "clubsdatabase");
		if(ret == null) return "";
		else return ret;
	}
	
	public static Object openBackup(Context c, String fileName, int division){
		String div = (division == Club.PRIMEIRADIVISAO) ? "a" : "b";
		return openBackup(c, fileName + div);
	}
	
	public static Object openBackup(Context c, String fileName){
		try {
			FileInputStream fis = c.openFileInput(fileName);
			ObjectInputStream is = new ObjectInputStream(fis);
			Object obj = is.readObject();
			is.close();
			return obj;
		} catch (FileNotFoundException e) {
			Log.i(TAG, e.toString());
			return null;
		} catch (StreamCorruptedException e) {
			Log.i(TAG, e.toString());
			return null;
		} catch (IOException e) {
			Log.i(TAG, e.toString());
			return null;
		} catch (ClassNotFoundException e) {
			Log.i(TAG, e.toString());
			return null;
		} catch(OutOfMemoryError e) {
			Log.i(TAG, e.toString());
			return null;
		} catch(ClassCastException e) {
			/* deserializacao de uma classe serializada numa versao antiga e que foi modificada causa esta exception - inconsistencia das estruturas */
			Log.i(TAG, e.toString());
			return null;
		} catch(StackOverflowError e) {
			Log.i(TAG, e.toString());
			return null;
		} catch(NullPointerException e){
			Log.i(TAG, e.toString());
			return null;
		} catch(NegativeArraySizeException e) {
			Log.i(TAG, e.toString());
			return null;
		} catch(ArrayIndexOutOfBoundsException e) {
			/* se ocorrer falta de memoria, o indice do array a ser desserializado pode ver como lixo de memoria e causar esta exception */
			Log.i(TAG, e.toString());
			return null;
		} catch(Exception e) {
			Log.i(TAG, e.toString());
			return null;
		}
	}
	
}