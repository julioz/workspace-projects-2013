package br.com.zynger.brasileirao2012;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.TreeMap;

import android.app.ListActivity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import br.com.zynger.brasileirao2012.adapters.RankingListAdapter;
import br.com.zynger.brasileirao2012.asynctasks.AsyncTaskListener;
import br.com.zynger.brasileirao2012.asynctasks.GetRankingTask;
import br.com.zynger.brasileirao2012.data.ClubsDB;
import br.com.zynger.brasileirao2012.enums.Division;
import br.com.zynger.brasileirao2012.model.Club;
import br.com.zynger.brasileirao2012.util.ConnectionHelper;
import br.com.zynger.brasileirao2012.util.FileHandler;
import br.com.zynger.brasileirao2012.util.JsonUtil;
import br.com.zynger.brasileirao2012.view.DataUpdateLayout;
import br.com.zynger.brasileirao2012.view.UpdateImageView;

public class RankingActivity extends ListActivity implements AsyncTaskListener {

	public static final String INTENT_DIVISION = "DIVISION";
	
	public final static int ORDER_POINTS = 0;
	public final static int ORDER_PLAYED = 1;
	public final static int ORDER_WIN = 2;
	public final static int ORDER_DRAW = 3;
	public final static int ORDER_LOSE = 4;
	public final static int ORDER_GOALSPRO = 5;
	public final static int ORDER_GOALSAGAINST = 6;
	public final static int ORDER_BALANCE = 7;
	
	private ClubsDB clubsDB;
	private TreeMap<String, Club> clubs;
	private SharedPreferences prefs;
	
	private Division division;
	
	private int headersClickCounter;
	private TextView headerMarked;
	
	private DataUpdateLayout dul_loading;
	private RelativeLayout rl_data;
	private TextView tv_division;
	private TextView tv_footer_left;
	private LinearLayout ll_division;
	private TextView tv_header_points, tv_header_played, tv_header_win, tv_header_draw;
	private TextView tv_header_lose, tv_header_goalspro, tv_header_goalsagainst, tv_header_balance;
	private ArrayList<TextView> headers;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.rankingactivity);
		
		division = (Division) getIntent().getSerializableExtra(INTENT_DIVISION);
		clubsDB = ClubsDB.getInstance(this);
		clubs = clubsDB.getClubs();
		prefs = PreferenceManager.getDefaultSharedPreferences(this);
		
		headersClickCounter = 1;
		
		loadViews();

		tv_division.setText(division.getStringNotation());
		if(division == Division.SECONDDIVISION){
			tv_footer_left.setText("Acesso");
		}

		setAdapter(orderAdapterList(ORDER_POINTS), tv_header_points, getResources().getColor(R.color.rankingrow_blue));

		if(prefs.getBoolean("cb_actsupdates", false)) new GetRankingTask(clubs, division, this).execute();
	}

	private void loadViews() {
		dul_loading = (DataUpdateLayout) findViewById(R.rankingactivity.dul_loading);
		rl_data = (RelativeLayout) findViewById(R.rankingactivity.rl_data);
		dul_loading.addViewToToggle(rl_data);
		tv_division = (TextView) findViewById(R.rankingactivity.tv_actionbar_division);
		ll_division = (LinearLayout) findViewById(R.rankingactivity.actionbar_ll);
		tv_footer_left = (TextView) findViewById(R.rankingactivity.tv_footer_left);
		
		tv_header_points = (TextView) findViewById(R.rankingactivity.tv_points);
		tv_header_played = (TextView) findViewById(R.rankingactivity.tv_played);
		tv_header_win = (TextView) findViewById(R.rankingactivity.tv_win);
		tv_header_draw = (TextView) findViewById(R.rankingactivity.tv_draw);
		tv_header_lose = (TextView) findViewById(R.rankingactivity.tv_lose);
		tv_header_goalspro = (TextView) findViewById(R.rankingactivity.tv_goalspro);
		tv_header_goalsagainst = (TextView) findViewById(R.rankingactivity.tv_goalsagainst);
		tv_header_balance = (TextView) findViewById(R.rankingactivity.tv_balance);
		
		headers = new ArrayList<TextView>();
		headers.add(tv_header_points);
		headers.add(tv_header_played);
		headers.add(tv_header_win);
		headers.add(tv_header_draw);
		headers.add(tv_header_lose);
		headers.add(tv_header_goalspro);
		headers.add(tv_header_goalsagainst);
		headers.add(tv_header_balance);
		
		OnClickListener headerOCL = new OnClickListener() {
			@Override
			public void onClick(View v) {
				TextView header = (TextView) v;
				if(header == headerMarked){
					headersClickCounter *= -1;
				}else{
					headersClickCounter = 1;
					headerMarked = header;
				}
				int color = getResources().getColor(R.color.rankingrow_blue);
				if(headersClickCounter == -1) color = getResources().getColor(R.color.rankingrow_red);
				else if(headersClickCounter == 1) color = getResources().getColor(R.color.rankingrow_blue);
				header.setBackgroundColor(color);
				setAdapter(orderAdapterList(headers.indexOf(header)), header, color);
			}
		};
		
		for (TextView header : headers) {
			header.setOnClickListener(headerOCL);
		}
		
		ll_division.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				finish();
				Intent it = new Intent(v.getContext(), RankingActivity.class);
				it.putExtra(INTENT_DIVISION, division.getOppositeDivision());
				startActivity(it);
			}
		});
		
		UpdateImageView update = (UpdateImageView) findViewById(R.rankingactivity.uiv_update);
		update.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				if(ConnectionHelper.isConnected(v.getContext())){
					new GetRankingTask(clubs, division, RankingActivity.this).execute();
				}else{
					Toast.makeText(v.getContext(),
							"Não foi possível atualizar. Verifique a conexão à internet.", Toast.LENGTH_SHORT).show();
				}
			}
		});
	}
	
	private ArrayList<Club> orderAdapterList(int orderType) {
		RankingListAdapter adapter = ((RankingListAdapter) getListAdapter());
		ArrayList<Club> list = new ArrayList<Club>();
		if(adapter == null){
			for (Club club : clubs.values()) {
				if(club.getDivision() == division) list.add(club);
			}
		}else list = adapter.getList();
		
		if(orderType == ORDER_POINTS) Collections.sort(list, new ByPointsComparator(headersClickCounter));
		else if(orderType == ORDER_PLAYED) Collections.sort(list, new ByPlayedComparator(headersClickCounter));
		else if(orderType == ORDER_WIN) Collections.sort(list, new ByWinComparator(headersClickCounter));
		else if(orderType == ORDER_DRAW) Collections.sort(list, new ByDrawComparator(headersClickCounter));
		else if(orderType == ORDER_LOSE) Collections.sort(list, new ByLoseComparator(headersClickCounter));
		else if(orderType == ORDER_GOALSPRO) Collections.sort(list, new ByGoalsProComparator(headersClickCounter));
		else if(orderType == ORDER_GOALSAGAINST) Collections.sort(list, new ByGoalsAgainstComparator(headersClickCounter));
		else if(orderType == ORDER_BALANCE) Collections.sort(list, new ByBalanceComparator(headersClickCounter));
		
		return list;
	}
	
	private void setAdapter(ArrayList<Club> clubs, TextView toFocus, int color) {
		for (TextView header : headers) {
			header.setBackgroundResource(0); //clear BG
		}
		toFocus.setBackgroundColor(color);
		
		setListAdapter(new RankingListAdapter(this, clubs));
	}

	@Override
	public void preExecution() {
		dul_loading.showFullLayout();
	}

	@SuppressWarnings("unchecked")
	@Override
	public void onComplete(Object result) {
		TreeMap<String, Club> clubs = (TreeMap<String, Club>) result;
		FileHandler.saveBackup(this, FileHandler.JSON_RANKING, JsonUtil.createRankingJson(clubs).toString());
		for (Club c : this.clubs.values()) {
			if(c.getDivision() == division.getOppositeDivision()) clubs.put(c.getAcronym(), c);
		}
		this.clubs = clubs;
		Toast.makeText(this, "Dados atualizados", Toast.LENGTH_SHORT).show(); //TODO mover para strings.xml
		
		ArrayList<Club> arrayClubs = new ArrayList<Club>();
		for (Club club : clubs.values()) {
			if(club.getDivision() == division) arrayClubs.add(club);
		}
		
		setAdapter(arrayClubs, tv_header_points, getResources().getColor(R.color.rankingrow_blue));
		dul_loading.hide();
	}

	@Override
	public void onFail(String message) {
		Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
		dul_loading.hide();
	}
	
	private class ByPointsComparator implements Comparator<Club> {
		int clickCounter;

		public ByPointsComparator(int clickCounter) {
			this.clickCounter = clickCounter;
		}

		@Override
		public int compare(Club c1, Club c2) {
			if(c1.getPoints() < c2.getPoints()) return clickCounter * 1;
			else if(c1.getPoints() > c2.getPoints()) return clickCounter * -1;
			else if(c1.getPoints() == c2.getPoints()){
				if(c1.getPosition() < c2.getPosition()) return clickCounter * -1;
				else if(c1.getPosition() > c2.getPosition()) return clickCounter * 1;
				else return 0;
			}
			return 1;
		}
	}

	private class ByPlayedComparator implements Comparator<Club> {
		int clickCounter;

		public ByPlayedComparator(int clickCounter) {
			this.clickCounter = clickCounter;
		}

		@Override
		public int compare(Club c1, Club c2) {
			if(c1.getPlayed() < c2.getPlayed()) return clickCounter * 1;
			else if(c1.getPlayed() > c2.getPlayed()) return clickCounter * -1;
			else return 0;
		}
	}

	private class ByWinComparator implements Comparator<Club> {
		int clickCounter;

		public ByWinComparator(int clickCounter) {
			this.clickCounter = clickCounter;
		}

		@Override
		public int compare(Club c1, Club c2) {
			if(c1.getWin() < c2.getWin()) return clickCounter * 1;
			else if(c1.getWin() > c2.getWin()) return clickCounter * -1;
			else return 0;
		}
	}

	private class ByDrawComparator implements Comparator<Club> {
		int clickCounter;

		public ByDrawComparator(int clickCounter) {
			this.clickCounter = clickCounter;
		}

		@Override
		public int compare(Club c1, Club c2) {
			if(c1.getDraw() < c2.getDraw()) return clickCounter * 1;
			else if(c1.getDraw() > c2.getDraw()) return clickCounter * -1;
			else return 0;
		}
	}

	private class ByLoseComparator implements Comparator<Club> {
		int clickCounter;

		public ByLoseComparator(int clickCounter) {
			this.clickCounter = clickCounter;
		}

		@Override
		public int compare(Club c1, Club c2) {
			if(c1.getLose() < c2.getLose()) return clickCounter * 1;
			else if(c1.getLose() > c2.getLose()) return clickCounter * -1;
			else return 0;
		}
	}

	private class ByGoalsProComparator implements Comparator<Club> {
		int clickCounter;

		public ByGoalsProComparator(int clickCounter) {
			this.clickCounter = clickCounter;
		}

		@Override
		public int compare(Club c1, Club c2) {
			if(c1.getGoalsPro() < c2.getGoalsPro()) return clickCounter * 1;
			else if(c1.getGoalsPro() > c2.getGoalsPro()) return clickCounter * -1;
			else return 0;
		}
	}

	private class ByGoalsAgainstComparator implements Comparator<Club> {
		int clickCounter;

		public ByGoalsAgainstComparator(int clickCounter) {
			this.clickCounter = clickCounter;
		}

		@Override
		public int compare(Club c1, Club c2) {
			if(c1.getGoalsAgainst() < c2.getGoalsAgainst()) return clickCounter * 1;
			else if(c1.getGoalsAgainst() > c2.getGoalsAgainst()) return clickCounter * -1;
			else return 0;
		}
	}

	private class ByBalanceComparator implements Comparator<Club> {
		int clickCounter;

		public ByBalanceComparator(int clickCounter) {
			this.clickCounter = clickCounter;
		}

		@Override
		public int compare(Club c1, Club c2) {
			if(c1.getBalance() < c2.getBalance()) return clickCounter * 1;
			else if(c1.getBalance() > c2.getBalance()) return clickCounter * -1;
			else return 0;
		}
	}
	
}
