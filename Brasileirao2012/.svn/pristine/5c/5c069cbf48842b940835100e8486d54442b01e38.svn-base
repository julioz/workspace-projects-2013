package br.com.zynger.brasileirao2012;

import java.util.ArrayList;
import java.util.TreeMap;

import android.app.Activity;
import android.content.Context;
import android.graphics.Typeface;
import android.os.AsyncTask;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.animation.Animation;
import android.view.animation.LinearInterpolator;
import android.view.animation.RotateAnimation;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TableLayout;
import android.widget.TextView;
import android.widget.Toast;
import br.com.zynger.brasileirao2012.model.Club;
import br.com.zynger.brasileirao2012.model.Match;
import br.com.zynger.brasileirao2012.util.ConnectionHelper;
import br.com.zynger.brasileirao2012.util.FileHandler;
import br.com.zynger.brasileirao2012.view.AprovRow;
import br.com.zynger.brasileirao2012.web.HTMLManager;

public class AprovActivity extends Activity {
	
	private static TreeMap<String, Club> clubs;
	
	private int division;
	
	private TextView actionbar_tt;
	private TextView tv_division;
	private LinearLayout ll_division;
	private ImageButton update;
	private RotateAnimation rot;
	private TableLayout tl_table;
	private RelativeLayout rl_loading;
	private LinearLayout ll_data;
	
	@SuppressWarnings("unchecked")
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.aprov);
		
		clubs = (TreeMap<String, Club>) FileHandler.openBackup(this, FileHandler.CLUBS);
		
		division = getIntent().getIntExtra("DIVISION", 0);
		
		loadViews();
		
		setDivisionLayoutConfigs();
		
		if(PreferenceManager.getDefaultSharedPreferences(this).getBoolean("cb_actsupdates", false)) new UpdateAprovTask(this).execute();
		else setTable();
	}

	private void loadViews() {
		actionbar_tt = (TextView) findViewById(R.aprov.tv_name);
		actionbar_tt.setTypeface(Typeface.createFromAsset(getAssets(), "tertre-xbol.otf"));
		
		ll_division = (LinearLayout) findViewById(R.aprov.actionbar_ll);
		tv_division = (TextView) findViewById(R.aprov.tv_actionbar_division);
		
		rl_loading = (RelativeLayout) findViewById(R.aprov.rl_loading);
		ll_data = (LinearLayout) findViewById(R.aprov.ll_data);
		
		tl_table = (TableLayout) findViewById(R.aprov.tl_table);
		
		rot = new RotateAnimation(0, 360, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
		rot.setInterpolator(new LinearInterpolator());
		rot.setDuration(900L);
		rot.setStartTime(200L);
		
		update = (ImageButton) findViewById(R.aprov.ib_update);
		
		update.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				v.startAnimation(rot);
				if(ConnectionHelper.isConnected(v.getContext())) new UpdateAprovTask(v.getContext()).execute();
				else Toast.makeText(v.getContext(), "Verifique a conexão à internet.", Toast.LENGTH_SHORT).show();
			}
		});
	}
	
	private void setDivisionLayoutConfigs(){
		if(division == Club.PRIMEIRADIVISAO) tv_division.setText("A");
		else tv_division.setText("B");
		
		ll_division.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				if(division == Club.PRIMEIRADIVISAO){
					tv_division.setText("B");
					division = Club.SEGUNDADIVISAO;
				}else{
					tv_division.setText("A");
					division = Club.PRIMEIRADIVISAO;
				}
				setTable();
			}
		});
	}
	
	private void setTable() {
		tl_table.removeAllViews();
		for (Club c : clubs.values()) {
			if(c.getDivision() == division) tl_table.addView(new AprovRow(this, c).getTableRow());
		}
		tl_table.invalidate();
	}
	
	private class UpdateAprovTask extends AsyncTask<Void, Void, TreeMap<Integer, ArrayList<Match>>> {
		private Context c;
		
		public UpdateAprovTask(Context c){
			this.setContext(c);
		}
		
		@Override
		protected void onPreExecute() {
			ll_data.setVisibility(View.GONE);
			rl_loading.setVisibility(View.VISIBLE);
			super.onPreExecute();
		}

		@Override
		protected TreeMap<Integer, ArrayList<Match>> doInBackground(Void... arg0) {
			try{				
				return HTMLManager.getTableData(getContext(), division);
			}catch(Exception e){
				return null;
			}
		}
		
		@Override
		protected void onPostExecute(TreeMap<Integer, ArrayList<Match>> result) {
			if(result != null){
				if(division == Club.PRIMEIRADIVISAO) FileHandler.saveBackup(getContext(), FileHandler.MATCHES_A, result);
				else if(division == Club.SEGUNDADIVISAO) FileHandler.saveBackup(getContext(), FileHandler.MATCHES_B, result);
				clubs = updateClubsDatabase(getContext(), result);
				if(clubs != null) Toast.makeText(getContext(), "Dados atualizados", Toast.LENGTH_SHORT).show();
				else Toast.makeText(getContext(), "Um erro ocorreu. Tente novamente mais tarde.", Toast.LENGTH_SHORT).show();
			}else{
				Toast.makeText(getContext(), "Não foi possível atualizar os dados. Tente novamente.", Toast.LENGTH_SHORT).show();
			}
			setTable();
			
			rl_loading.setVisibility(View.GONE);
			ll_data.setVisibility(View.VISIBLE);
			super.onPostExecute(result);
		}

		public Context getContext() {
			return c;
		}

		public void setContext(Context c) {
			this.c = c;
		}
	}
	
	@SuppressWarnings("unchecked")
	public static TreeMap<String, Club> updateClubsDatabase(Context context, TreeMap<Integer, ArrayList<Match>> matches) {
		TreeMap<String, Club> clubs = (TreeMap<String, Club>) FileHandler.openBackup(context, FileHandler.CLUBS);
		
		if(clubs == null) return null;
		
		for (Match m : matches.get(1)) {
			Club home = clubs.get(m.getClubHome().getName());
			home.setMand(m.getClubHome().getMand());
			home.setVisit(m.getClubHome().getVisit());
			
			Club away = clubs.get(m.getClubAway().getName());
			away.setMand(m.getClubAway().getMand());
			away.setVisit(m.getClubAway().getVisit());
		}
		
		FileHandler.saveBackup(context, FileHandler.CLUBS, clubs);
		return clubs;
		
	}
}
