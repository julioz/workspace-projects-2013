package br.com.zynger.brasileirao2012.adapters;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.text.Html;
import android.text.Spanned;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import br.com.zynger.brasileirao2012.R;
import br.com.zynger.brasileirao2012.asynctasks.DownloadImageTask;
import br.com.zynger.brasileirao2012.model.Move;
import br.com.zynger.brasileirao2012.util.MoveByTimeComparator;
import br.com.zynger.brasileirao2012.util.ShareHelper;
import br.com.zynger.brasileirao2012.view.ExpandAnimation;

public class MoveToMoveArrayAdapter extends ArrayAdapter<Move> {
	private static final int COLOR_BLUE = 0xFF7171CF;

	private final static int LAYOUT_RESOURCE_ID = R.layout.movetomovelayout;
	
	private LayoutInflater layoutInflater;
	private ArrayList<Move> moves;
	private boolean showThumbs;
	private HashMap<String, Bitmap> cache;
	
	public MoveToMoveArrayAdapter(Context context, ArrayList<Move> moves) {
		super(context, LAYOUT_RESOURCE_ID, moves);
		this.moves = moves;
		Collections.sort(this.moves, new MoveByTimeComparator());
		this.showThumbs = false;
		this.cache = null;
		layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
	}
	
	public MoveToMoveArrayAdapter(Context context, ArrayList<Move> moves,
			boolean showThumbs, HashMap<String, Bitmap> cache) {
		super(context, LAYOUT_RESOURCE_ID, moves);
		this.moves = moves;
		Collections.sort(this.moves, new MoveByTimeComparator());
		this.showThumbs = showThumbs;
		this.cache = cache;
		layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
	}
	
	@Override
	public int getCount() {
		return moves.size();
	}
	
	public String getLastIdEntered(){
		Move move = (Move) getItem(0);
		if(move != null) return String.valueOf(move.getId());
		else return null;
	}

	public ArrayList<Move> getMovesWithVideos(){
		ArrayList<Move> videoMoves = new ArrayList<Move>();
		for (Move move : moves) {
			if(move.getVideo_url() != null){
				videoMoves.add(move);
			}			
		}
		return videoMoves;
	}
	
	public ArrayList<Move> getMoves() {
		return moves;
	}

	@Override
	public Move getItem(int position) {
		return moves.get(position);
	}
	
	public Move getMoveById(int id){
		for (Move move : moves) {
			if(move.getId() == id) return move;
		}
		return null;
	}

	@Override
	public long getItemId(int position) {
		return getItem(position).getId();
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		View row = convertView;
		MoveToMoveHolder holder = null;
        
        if(row == null){
            row = layoutInflater.inflate(LAYOUT_RESOURCE_ID, parent, false);
            
            holder = new MoveToMoveHolder();
            holder.tv_text = (TextView) row.findViewById(R.mtmlayout.tv_text);
            holder.tv_moment = (TextView) row.findViewById(R.mtmlayout.tv_moment);
            holder.tv_time = (TextView) row.findViewById(R.mtmlayout.tv_time);
            holder.ll_type = (LinearLayout) row.findViewById(R.mtmlayout.ll_type);
            holder.iv_type = (ImageView) row.findViewById(R.mtmlayout.iv_type);
            holder.iv_videothumb = (ImageView) row.findViewById(R.mtmlayout.iv_videothumb); 
    		holder.toolbar = row.findViewById(R.mtmlayout.toolbar);
    		holder.ib_read = (ImageButton) row.findViewById(R.mtmlayout.ib_read);
    		holder.ib_share = (ImageButton) row.findViewById(R.mtmlayout.ib_share);
    		holder.ib_video = (ImageButton) row.findViewById(R.mtmlayout.ib_video);
            
            row.setTag(holder);
        }else{
            holder = (MoveToMoveHolder) row.getTag();
            holder.tv_text.setTextColor(getContext().getResources().getColor(android.R.color.white));
            holder.ll_type.setVisibility(View.GONE);
            holder.ib_video.setVisibility(View.GONE);
            if(holder.toolbar.getVisibility() == View.VISIBLE){
            	 holder.toolbar.startAnimation(
                 		new ExpandAnimation(holder.toolbar, 1));
            }
        }
		
        final Move move = (Move) getItem(position);
        
        final Spanned moveText = Html.fromHtml(move.getTexto());
        holder.tv_text.setText(moveText);
		
		String momento = move.getMomento();
		if(!momento.equals("")){
			holder.tv_moment.setText(momento + "'");
			holder.tv_moment.setVisibility(View.VISIBLE);
		}else holder.tv_moment.setVisibility(View.GONE);
		
		setType(holder.ll_type, holder.iv_type, move.getTipo(), move.getCartao());
		
		holder.tv_time.setText(move.getPeriodo());
		
		holder.ib_read.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				showLongTextDialog(moveText.toString().trim(), move.getPeriodo());
			}
		});
		
		holder.ib_share.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				new ShareHelper((Activity) getContext(), move.getPeriodo()
						+ "\n" + moveText.toString()).share();
			}
		});
		
		final String video = move.getVideo_url();
		if(video != null){
			holder.ib_video.setVisibility(View.VISIBLE);
			holder.tv_text.setTextColor(COLOR_BLUE);
			holder.ib_video.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(video));
					getContext().startActivity(browserIntent);
				}
			});
		}
		
		row.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				MoveToMoveHolder holder = (MoveToMoveHolder) v.getTag();
                holder.toolbar.startAnimation(
                		new ExpandAnimation(holder.toolbar, 350));
			}
		});
		
		if(showThumbs) new DownloadImageTask(move.getUrl_thumb(), holder.iv_videothumb, cache).execute();
		
		return row;
	}
	
	private void setType(LinearLayout ll_type, ImageView iv_type,
			Move.Type tipo, Move.Card cartao) {
		ll_type.setVisibility(View.VISIBLE);
		
		switch (tipo) {
		case MOVE:
			ll_type.setVisibility(View.GONE);
			break;
		case CARD:
			switch (cartao) {
			case YELLOW:
			case RED:
				iv_type.setImageResource(cartao.getImageResource());
				break;
			default:
				ll_type.setVisibility(View.GONE);
				break;
			}
			break;
		default:
			iv_type.setImageResource(tipo.getImageResource());
			break;
		}
	}
	
	private void showLongTextDialog(final String message, final String periodo) {
		final Dialog d = new Dialog(this.getContext());
		d.requestWindowFeature(Window.FEATURE_NO_TITLE);
		d.setContentView(R.layout.dialogshare);
		
		TextView tv = (TextView) d.findViewById(R.dialogshare.tv);
		final EditText et = (EditText) d.findViewById(R.dialogshare.et);
		et.setVisibility(View.GONE);
		Button bt1 = (Button) d.findViewById(R.dialogshare.btcancel);
		bt1.setText("OK");
		Button bt2 = (Button) d.findViewById(R.dialogshare.btsend);
		bt2.setText(getContext().getString(R.string.share_send));
		
		tv.setText(message);
		
		bt1.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				d.dismiss();
			}
		});
		
		bt2.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				d.dismiss();
				new ShareHelper((Activity) getContext(),
						periodo + "\n" + message).share();
			}
		});
		
		d.show();
	}
}

class MoveToMoveHolder {
	TextView tv_text;
	TextView tv_moment;
	TextView tv_time;
	LinearLayout ll_type;
	ImageView iv_type;
	ImageView iv_videothumb; 
	View toolbar;
	ImageButton ib_read;
	ImageButton ib_share;
	ImageButton ib_video;
}
