package br.com.zynger.brasileirao2012.rest;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Locale;
import java.util.TreeMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.content.Context;
import android.util.Log;
import br.com.zynger.brasileirao2012.HomeActivity;
import br.com.zynger.brasileirao2012.model.Club;
import br.com.zynger.brasileirao2012.model.Match;
import br.com.zynger.brasileirao2012.model.Move;
import br.com.zynger.brasileirao2012.util.JsonUtil;
import br.com.zynger.brasileirao2012.util.WebDatabaseMapper;

public class MoveToMoveREST {

	private static final String MOVETOMOVE_VIDEOS_PREFIX = "http://api.globovideos.com/videos/";
	private static final String MOVETOMOVE_VIDEOS_SUFFIX = "/playlist";
	private static final String MOVETOMOVE_URL_PREFIX = "http://globoesporte.globo.com/temporeal/futebol/";
	private static final String MOVETOMOVE_URL_SUFFIX = "/mensagens.json";
	
	private final String FORMAT_PATTERN = "dd-MM-yyyy";

	private WebDatabaseMapper webDatabaseMapper;
	private SimpleDateFormat sdf;
	
	public MoveToMoveREST(TreeMap<String, Club> clubs) {
		this.webDatabaseMapper = new WebDatabaseMapper(clubs, WebDatabaseMapper.SOURCE_MOVETOMOVE);
		this.sdf = new SimpleDateFormat(FORMAT_PATTERN, Locale.getDefault());
	}
	
	public ArrayList<Move> getRealTimeMatchMoveToMove(Context context, Match m) throws JSONException{
		String url = getRealTimeMatchUrl(m);
		Log.e(HomeActivity.TAG, url);
		JSONArray jsonarray = new JSONArray(JsonUtil.readJsonFeed(url));
		
		ArrayList<Move> moves = new ArrayList<Move>();
		for (int i = 0; i < jsonarray.length(); i++) {
			JSONObject obj = jsonarray.getJSONObject(i);
			try{
				Move move = parseMove(obj);
				if(move == null) continue;
				if(move.getOperacao().equals("ALTERACAO")) modifyMove(moves, move);
				else moves.add(0, move);
			}catch(JSONException e){
				Log.e(HomeActivity.TAG, obj.toString());
				e.printStackTrace();
				continue;
			}
		}
		
		return moves;
	}
	
	private void modifyMove(ArrayList<Move> moves, Move sourceMove) {
		Move moveToRemove = null;
		for (Move move : moves) {
			if(move.getId() == sourceMove.getId()){
				moveToRemove = move;
				break;
			}
		}
		if(moveToRemove != null){
			moves.remove(moveToRemove);
			moves.add(sourceMove);
		}
	}

	public ArrayList<Move> getUpdatedMoves(Context context, ArrayList<Move> adapterMoves, String lastId, Match match) throws JSONException{
		String url = getRealTimeMatchUrl(match);
		JSONArray jsonarray = new JSONArray(JsonUtil.readJsonFeed(url));
		ArrayList<Move> moves = new ArrayList<Move>();
		for (int i = jsonarray.length() - 1; i >= 0; i--){
			JSONObject obj = jsonarray.getJSONObject(i);
			try{
				Move move = parseMove(obj);
				if(move == null) continue;
				if(move.getOperacao().equals("ALTERACAO")) modifyMove(adapterMoves, move);
				else{					
					if(String.valueOf(move.getId()).equals(lastId)) break;
					moves.add(move);
				}
			}catch(JSONException e){
				Log.e(HomeActivity.TAG, obj.toString());
				e.printStackTrace();
				continue;
			}catch(Exception e){
				Log.e(HomeActivity.TAG, obj.toString());
				e.printStackTrace();
				continue;
			}
		}
		return moves;
	}
	
	@SuppressLint("DefaultLocale")
	private String getRealTimeMatchUrl(Match m){
		String home = webDatabaseMapper.getStringForMoveToMove(m.getHome().getName());
		home = home.toLowerCase();
		home = home.replace(" ", "-");
		String away = webDatabaseMapper.getStringForMoveToMove(m.getAway().getName());
		away = away.toLowerCase();
		away = away.replace(" ", "-");
		
		return MOVETOMOVE_URL_PREFIX + sdf.format(m.getDate().getTime()) + "/" + home + "-" + away + MOVETOMOVE_URL_SUFFIX;
	}
	
	private Move parseMove(JSONObject obj) throws JSONException{
		String operacao = obj.getString("operacao");
		Move.Type tipo = Move.Type.getFromSource(obj.getString("tipo"));

        String nome_time = getStringFromJSONObject(obj, "nome_time");
		String periodo = getStringFromJSONObject(obj, "periodo");
		String video_id = getStringFromJSONObject(obj, "video_id");
		String url_thumb = getStringFromJSONObject(obj, "url_thumb_playlist");
		int periodo_id = getIntFromJSONObject(obj, "periodo_id");
		String texto = getStringFromJSONObject(obj, "texto");
		String momento = getStringFromJSONObject(obj, "momento");
		int id = getIntFromJSONObject(obj, "id");
		
		String video_url = null;
		if(video_id != null && !video_id.trim().equals("")) video_url = getMoveVideoUrl(video_id);
		
		Move.Card cartao = null;
		try{					
			JSONObject objCard = obj.getJSONObject("cartao");
			cartao = Move.Card.getFromSource(objCard.getString("tipo"));
		}catch(JSONException e){}
		
		if(texto == null || momento == null) return null;			
		
		texto = texto.replaceAll("<p>", "");
		texto = texto.replaceAll("</p>", "");
		
		Move move = new Move(operacao, tipo, nome_time, periodo, video_id, url_thumb,
				periodo_id, texto, momento, id, video_url, cartao);
		return move;
	}
	
	private String getStringFromJSONObject(JSONObject obj, String tag) throws JSONException {
		String string = null;
		if(obj.has(tag)) string = obj.getString(tag);
		return string;
	}
	
	private int getIntFromJSONObject(JSONObject obj, String tag) throws JSONException {
		int value = -1;
		if(obj.has(tag)) value = obj.getInt(tag);
		return value;
	}

	private String getMoveVideoUrl(String video_id) {
		String url = MOVETOMOVE_VIDEOS_PREFIX + video_id + MOVETOMOVE_VIDEOS_SUFFIX;
		try {
			JSONObject json = new JSONObject(JsonUtil.readJsonFeed(url));
			JSONArray tmp = json.getJSONArray("videos");
			JSONObject videos = tmp.getJSONObject(0);
			JSONArray resources = videos.getJSONArray("resources");
			for (int i = 0; i < resources.length(); i++) {
				try{
					JSONObject videoObj = resources.getJSONObject(i);
					
					if(videoObj.getString("kind").equals("M4")) return videoObj.getString("url");
					else continue;
				}catch(JSONException e){
					continue;
				}
			}
		} catch (JSONException e) {
			e.printStackTrace();
			return null;
		}
		return null;
	}
}
