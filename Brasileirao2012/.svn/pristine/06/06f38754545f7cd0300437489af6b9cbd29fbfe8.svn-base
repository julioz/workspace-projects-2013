package br.com.zynger.brasileirao2012;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeMap;

import org.json.JSONArray;
import org.json.JSONException;

import android.app.ListActivity;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.preference.PreferenceManager;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
import br.com.zynger.brasileirao2012.adapters.MoveToMoveAdapter;
import br.com.zynger.brasileirao2012.asynctasks.AsyncTaskListener;
import br.com.zynger.brasileirao2012.asynctasks.GetMoveToMoveTask;
import br.com.zynger.brasileirao2012.asynctasks.UpdateMoveToMoveTask;
import br.com.zynger.brasileirao2012.data.ClubsDB;
import br.com.zynger.brasileirao2012.enums.Division;
import br.com.zynger.brasileirao2012.model.Club;
import br.com.zynger.brasileirao2012.model.Match;
import br.com.zynger.brasileirao2012.model.Move;
import br.com.zynger.brasileirao2012.model.RealTimeMatch;
import br.com.zynger.brasileirao2012.util.FileHandler;
import br.com.zynger.brasileirao2012.view.ActionItem;
import br.com.zynger.brasileirao2012.view.DataUpdateLayout;
import br.com.zynger.brasileirao2012.view.QuickAction;

public class MoveToMoveActivity extends ListActivity implements AsyncTaskListener {

	public static final String INTENT_MATCH = "MATCH";
	public static final String INTENT_REALTIME = "REALTIME";
	
	private final int UPDATE_INTERVAL = 90 * 1000;
	
	private Timer timer;
	
	private Match match;
	private boolean fromRealTime, highPerformance;
	
	private TreeMap<String, Club> clubs;
	
	private QuickAction quickaction;
	private ActionItem actionItem_followMatch, actionItem_showSquad, actionItem_videoCentral;
	
	private DataUpdateLayout dul_loading;
	private LinearLayout ll_actionbar_loading;
	private ProgressBar pb_actionbar_progressbar;
	private TextView scrH, scrA;
	private ImageView home, away, iv_more;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.movetomoveactivity);
		
		loadViews();
		
		fromRealTime = getIntent().getBooleanExtra(INTENT_REALTIME, false);
		clubs = ClubsDB.getInstance(this).getClubs();
		highPerformance = PreferenceManager.getDefaultSharedPreferences(this).getBoolean("cb_highperformance", true);
		
		String jsonMatch = getIntent().getStringExtra(INTENT_MATCH);			
		if(jsonMatch != null){
			try{				
				this.match = new Match(new JSONArray(jsonMatch), clubs);
			}catch(JSONException je){
				je.printStackTrace();
				Toast.makeText(this, "Um erro ocorreu.\nNão foi possível abrir o lance a lance para esta partida",
						Toast.LENGTH_SHORT).show();
				finish();
			}
		}else{
			Toast.makeText(this, "Um erro ocorreu.\nNão foi possível abrir o lance a lance para esta partida",
					Toast.LENGTH_SHORT).show();
			finish();
		}
		
		setData();
		
		new GetMoveToMoveTask(this, clubs, match, this).execute();
					
		iv_more.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				quickaction = new QuickAction(v);
				quickaction.setAnimStyle(QuickAction.ANIM_REFLECT);
				
				if(fromRealTime) setRealTimeQuickAction(((RealTimeMatch) match));
				else setQuickActionVideoCentralButton(quickaction);
				
				quickaction.show();
			}
		});
	}

	private void loadViews() {
		dul_loading = (DataUpdateLayout) findViewById(R.movetomoveactivity.dul_loading);
		ll_actionbar_loading = (LinearLayout) findViewById(R.movetomoveactivity.ll_actionbar_loading);
		pb_actionbar_progressbar = (ProgressBar) findViewById(R.movetomoveactivity.pb_actionbar_progressbar);
		scrH = (TextView) findViewById(R.movetomoveactivity.tv_scr_h);
		scrA = (TextView) findViewById(R.movetomoveactivity.tv_scr_a);
		home = (ImageView) findViewById(R.movetomoveactivity.iv_home);
		away = (ImageView) findViewById(R.movetomoveactivity.iv_away);
		iv_more = (ImageView) findViewById(R.movetomoveactivity.iv_more);
	}
		
	private void setData() {
		if(!fromRealTime){			
			home.setImageResource(match.getHome().getBadgeResource(this));
			away.setImageResource(match.getAway().getBadgeResource(this));
		}else{
			Club cHome = match.getHome();
			Club cAway = match.getAway();
			home.setImageResource(cHome.getBadgeResource(this));
			away.setImageResource(cAway.getBadgeResource(this));
		}
		
		int scoreHome = match.getScoreHome();
		int scoreAway = match.getScoreAway();
		scrH.setText(scoreHome != Match.SCORE_NULL ? String.valueOf(scoreHome) : new String());
		scrA.setText(scoreAway != Match.SCORE_NULL ? String.valueOf(scoreAway) : new String());
	}
	
	@Override
	protected void onResume() {
		if(fromRealTime){
			if(timer != null) timer.cancel();
			startRecorrentTask();
		}
		super.onResume();
	}
	
	private void startRecorrentTask() {
		TimerTask doAsynchronousTask;
		final Handler handler = new Handler();
		timer = new Timer();

		doAsynchronousTask = new TimerTask() {
			@Override
			public void run() {
				handler.post(new Runnable() {
					public void run() {
						MoveToMoveAdapter adapter = ((MoveToMoveAdapter) getListAdapter());
						if(adapter != null && dul_loading.isHidden()){
							String lastId = adapter.getLastIdEntered();
							new UpdateMoveToMoveTask(MoveToMoveActivity.this, clubs,
									match, lastId, MoveToMoveActivity.this).execute();
						}
					}
				});
			}
		};
		
		timer.schedule(doAsynchronousTask, 0, UPDATE_INTERVAL);
	}
	
	@Override
	protected void onStop() {
		if(timer != null) timer.cancel();
		super.onStop();
	}
	
	private void setRealTimeQuickAction(final RealTimeMatch rtm) {
		if(rtm.getUrlDetails() != null && rtm.getDivision() == Division.FIRSTDIVISION &&
				(rtm.getStateConstant() == RealTimeMatch.EM_ANDAMENTO
				|| rtm.getStateConstant() == RealTimeMatch.FINALIZADO)){
			actionItem_showSquad = new ActionItem();
			actionItem_showSquad.setIcon(getResources().getDrawable(R.drawable.ic_squad_quickaction));
			actionItem_showSquad.setTitle("Escalação");
			actionItem_showSquad.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					Intent it = new Intent(v.getContext(), RealTimeMatchSquadActivity.class);
					it.putExtra(RealTimeMatchSquadActivity.INTENT_REALTIMEMATCH, rtm.toJson().toString());
					quickaction.dismiss();
					v.getContext().startActivity(it);
				}
			});
			
			quickaction.addActionItem(actionItem_showSquad);
		}
		
		setQuickActionVideoCentralButton(quickaction);
		
		if(rtm.getStateConstant() == RealTimeMatch.A_INICIAR || rtm.getStateConstant() == RealTimeMatch.EM_ANDAMENTO){
			actionItem_followMatch = new ActionItem();
			actionItem_followMatch.setIcon(getResources().getDrawable(R.drawable.ic_alert_quickaction));
			
			RealTimeMatch bkp = (RealTimeMatch) FileHandler.openBackup(this, FileHandler.FOLLOWEDREALTIMEMATCH);
			if(bkp != null && bkp.toString().equals(rtm.toString())){
				actionItem_followMatch.setTitle("Não acompanhar");
				actionItem_followMatch.setOnClickListener(new OnClickListener() {
					@Override
					public void onClick(View v) {
						Intent it = new Intent(v.getContext(), RealTimeMatchService.class);
						v.getContext().stopService(it);
						FileHandler.saveBackup(v.getContext(), FileHandler.FOLLOWEDREALTIMEMATCH, new RealTimeMatch());
						quickaction.dismiss();
						Toast.makeText(v.getContext(), "Você não está mais acompanhando a partida.", Toast.LENGTH_SHORT).show();
					}
				});
			}else{
				actionItem_followMatch.setTitle("Acompanhar");
				actionItem_followMatch.setOnClickListener(new OnClickListener() {
					@Override
					public void onClick(View v) {
						Intent it = new Intent(v.getContext(), RealTimeMatchService.class);
						if(RealTimeMatchesActivity.isMyServiceRunning(v.getContext())) v.getContext().stopService(it);
						FileHandler.saveBackup(v.getContext(), FileHandler.FOLLOWEDREALTIMEMATCH, rtm);
						v.getContext().startService(it);
						quickaction.dismiss();
					}
				});
			}
			
			quickaction.addActionItem(actionItem_followMatch);
		}
	}
	
	private void setQuickActionVideoCentralButton(QuickAction qa){
		actionItem_videoCentral = new ActionItem();
		actionItem_videoCentral.setIcon(getResources().getDrawable(R.drawable.ic_video_quickaction));
		actionItem_videoCentral.setTitle("Vídeos");
		actionItem_videoCentral.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				MoveToMoveAdapter mtmadapter = ((MoveToMoveAdapter) getListAdapter());
				if(mtmadapter != null && mtmadapter.getCount() > 0){
					ArrayList<Move> al_moves = mtmadapter.getMovesWithVideos();
					if(al_moves.size() > 0){						
						Intent it = new Intent(v.getContext(), MoveToMoveVideoCentralActivity.class);
						it.putExtra(MoveToMoveVideoCentralActivity.INTENT_MOVES, al_moves);
						v.getContext().startActivity(it);
					}else{						
						Toast.makeText(v.getContext(), "Não há vídeos para exibição no momento.", Toast.LENGTH_SHORT).show();
					}
				}
			}
		});
		
		qa.addActionItem(actionItem_videoCentral);
	}

	@SuppressWarnings("unused")
	private void addToAdapterStart(Move move){
		LinkedHashMap<String, Move> newMap = new LinkedHashMap<String, Move>();
		newMap.put(String.valueOf(move.getId()), move);
		newMap.putAll(((MoveToMoveAdapter) getListAdapter()).getMoves());
		setListAdapter(new MoveToMoveAdapter(this, newMap));
	}
	
	private void addToAdapterStart(ArrayList<Move> moves){
		LinkedHashMap<String, Move> newMap = new LinkedHashMap<String, Move>();
		for (Move mv : moves) {
			newMap.put(String.valueOf(mv.getId()), mv);
		}
		newMap.putAll(((MoveToMoveAdapter) getListAdapter()).getMoves());
		setListAdapter(new MoveToMoveAdapter(this, newMap));
	}
	
	private void checkForGoals(ArrayList<Move> moves) {
		for (Move move : moves) {
			if(move.getTipo() == Move.TIPO_LANCEGOL){
				if(move.getNome_time().equals(match.getHome().getName())){
					int score = Integer.valueOf(scrH.getText().toString());
					score++;
					scrH.setText(String.valueOf(score));
				}else if(move.getNome_time().equals(match.getAway().getName())){
					int score = Integer.valueOf(scrA.getText().toString());
					score++;
					scrA.setText(String.valueOf(score));
				}
			}
		}
	}
	
	@Override
	public void preExecution() {
		pb_actionbar_progressbar.setVisibility(View.VISIBLE);
		ll_actionbar_loading.setVisibility(View.VISIBLE);
		
		if(getListAdapter() != null && getListAdapter().isEmpty()){
			dul_loading.showFullLayout();
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public void onComplete(Object result) {
		if(result instanceof LinkedHashMap<?, ?>){
			dul_loading.hide();
			
			LinkedHashMap<String, Move> moves = (LinkedHashMap<String, Move>) result;
			if(moves.size() > 0) setListAdapter(new MoveToMoveAdapter(this, moves));
			else dul_loading.setOnlyText("A partida ainda não tem lances registrados."); //TODO mover para strings.xml
		}else if(result instanceof ArrayList<?>){
			ArrayList<Move> moves = (ArrayList<Move>) result;
			if(moves.size() > 0){					
				if(scrH.getText().toString().equals("") && scrA.getText().toString().equals("")){
					scrH.setText("0");
					scrA.setText("0");
				}
				addToAdapterStart(moves);
				checkForGoals(moves);
			}
		}

		ll_actionbar_loading.setVisibility(View.GONE);
		pb_actionbar_progressbar.setVisibility(View.GONE);
	}

	@Override
	public void onFail(String message) {
		if(message != null) dul_loading.setOnlyText(message);
		pb_actionbar_progressbar.setVisibility(View.GONE);
		ll_actionbar_loading.setVisibility(View.GONE);
	}
}