package br.com.zynger.brasileirao2012;

import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeMap;

import org.json.JSONException;

import android.app.ListActivity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Typeface;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.preference.PreferenceManager;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import br.com.zynger.brasileirao2012.model.Club;
import br.com.zynger.brasileirao2012.model.Match;
import br.com.zynger.brasileirao2012.model.Move;
import br.com.zynger.brasileirao2012.model.RealTimeMatch;
import br.com.zynger.brasileirao2012.util.FileHandler;
import br.com.zynger.brasileirao2012.view.ActionItem;
import br.com.zynger.brasileirao2012.view.MoveToMoveLayout;
import br.com.zynger.brasileirao2012.view.QuickAction;
import br.com.zynger.brasileirao2012.web.HTMLManager;

public class MoveToMoveActivity extends ListActivity {

	public static final String INTENT_MATCH = "MATCH";
	public static final String INTENT_REALTIME = "REALTIME";
	public static final String INTENT_CLUBHOME = "REALTIME_CLUBHOME";
	public static final String INTENT_CLUBAWAY = "REALTIME_CLUBAWAY";
	
	private final int UPDATE_INTERVAL = 90 * 1000;
	private final int DATE_YEAR = 2012;
	
	private Timer timer;
	
	private Match match;
	private RealTimeMatch rtmatch;
	private boolean fromRealTime, highPerformance;
	
	private QuickAction quickaction;
	private ActionItem actionItem_followMatch, actionItem_showSquad, actionItem_videoCentral;
	
	private RelativeLayout rl_loading;
	private LinearLayout ll_actionbar_loading;
	private ProgressBar pb_actionbar_progressbar, pb_progressbar;
	private TextView actionbar_tt, tv_progressbar;
	private TextView scrH, scrA;
	private ImageView home, away, iv_more;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.movetomove);
		
		loadViews();
		
		fromRealTime = getIntent().getBooleanExtra(INTENT_REALTIME, false);
		
		highPerformance = PreferenceManager.getDefaultSharedPreferences(this).getBoolean("cb_highperformance", true);
		
		Object intent_match = getIntent().getSerializableExtra(INTENT_MATCH);
		if(!fromRealTime){			
			if(intent_match != null && intent_match instanceof Match){
				this.match = (Match) intent_match;
			}else{
				Toast.makeText(this, "Um erro ocorreu.\nNão foi possível abrir o lance a lance para esta partida", Toast.LENGTH_SHORT).show();
				finish();
			}
		}else{
			if(intent_match != null && intent_match instanceof RealTimeMatch){
				this.rtmatch = (RealTimeMatch) intent_match;
				Club home = (Club) getIntent().getSerializableExtra(INTENT_CLUBHOME);
				Club away = (Club) getIntent().getSerializableExtra(INTENT_CLUBAWAY);
				this.match = fromRealTimeMatchToMatch(home, away, rtmatch);
			}else{
				Toast.makeText(this, "Um erro ocorreu.\nNão foi possível abrir o lance a lance para esta partida", Toast.LENGTH_SHORT).show();
				finish();
			}
		}
		
		setData();
		
		new MoveToMoveOpenTask(this).execute();
					
		iv_more.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				quickaction = new QuickAction(v);
				quickaction.setAnimStyle(QuickAction.ANIM_REFLECT);
				
				if(getRealTimeMatch() != null) setRealTimeQuickAction(getRealTimeMatch().getStateConstant());
				else setQuickActionVideoCentralButton(quickaction);
				
				
				quickaction.show();
			}
		});
	}

	private void loadViews() {
		actionbar_tt = (TextView) findViewById(R.movetomove.tv_name);
		actionbar_tt.setTypeface(Typeface.createFromAsset(getAssets(), "tertre-xbol.otf"));
		rl_loading = (RelativeLayout) findViewById(R.movetomove.rl_loading);
		ll_actionbar_loading = (LinearLayout) findViewById(R.movetomove.ll_actionbar_loading);
		pb_actionbar_progressbar = (ProgressBar) findViewById(R.movetomove.pb_actionbar_progressbar);
		pb_progressbar = (ProgressBar) findViewById(R.movetomove.pb_progressbar);
		tv_progressbar = (TextView) findViewById(R.movetomove.tv_progressbar);
		scrH = (TextView) findViewById(R.movetomove.tv_scr_h);
		scrA = (TextView) findViewById(R.movetomove.tv_scr_a);
		home = (ImageView) findViewById(R.movetomove.iv_home);
		away = (ImageView) findViewById(R.movetomove.iv_away);
		iv_more = (ImageView) findViewById(R.movetomove.iv_more);
	}
	
	private Match fromRealTimeMatchToMatch(Club home, Club away, RealTimeMatch rtm){
		String res_home = rtm.getResultHome();
		String res_away = rtm.getResultAway();
		int resHome = -1;
		int resAway = -1;
		if(!res_home.equals("")) resHome = Integer.parseInt(res_home);
		if(!res_away.equals("")) resAway = Integer.parseInt(res_away);
		
		GregorianCalendar date = rtm.getCalendarDate();
		
		if(date == null){			
			String datetime = rtm.getDatetime();
			datetime = datetime.substring(datetime.indexOf(", ") + ", ".length());
			int day = Integer.parseInt(datetime.substring(0, 2));
			datetime = datetime.substring(datetime.indexOf("/") + "/".length());
			int month = Integer.parseInt(datetime.substring(0, 2));
			
			date = new GregorianCalendar(DATE_YEAR, month, day);
		}
		
		return new Match(home, away, null, resHome, resAway, -1, date);
	}
	
	private void setData() {
		home.setImageResource(match.getHome().getBadge());
		away.setImageResource(match.getAway().getBadge());
		
		int scoreHome = match.getScore_home();
		int scoreAway = match.getScore_away();
		String str_scoreHome = "";
		String str_scoreAway = "";
		if(scoreHome >= 0) str_scoreHome = String.valueOf(scoreHome);
		if(scoreAway >= 0) str_scoreAway = String.valueOf(scoreAway);
		scrH.setText(str_scoreHome);
		scrA.setText(str_scoreAway);
	}
	
	@Override
	protected void onResume() {
		if(fromRealTime){
			if(timer != null) timer.cancel();
			startRecorrentTask();
		}
		super.onResume();
	}
	
	private void startRecorrentTask() {
		TimerTask doAsynchronousTask;
		final Handler handler = new Handler();
		timer = new Timer();

		doAsynchronousTask = new TimerTask() {
			@Override
			public void run() {
				handler.post(new Runnable() {
					public void run() {
						MoveToMoveAdapter adapter = ((MoveToMoveAdapter) getListAdapter());
						if(adapter != null && rl_loading.getVisibility() == View.GONE){
							String lastId = adapter.getLastIdEntered();
							MoveToMoveUpdateTask backTask = new MoveToMoveUpdateTask(MoveToMoveActivity.this, lastId, match);
							backTask.execute();
						}
					}
				});
			}
		};
		
		timer.schedule(doAsynchronousTask, 0, UPDATE_INTERVAL);
	}
	
	@Override
	protected void onStop() {
		if(timer != null) timer.cancel();
		super.onStop();
	}
	
	private void setRealTimeQuickAction(int state) {
		if(getRealTimeMatch().getUrlDetails() != null && getRealTimeMatch().isSerieA() && (state == RealTimeMatch.EM_ANDAMENTO || state == RealTimeMatch.FINALIZADO)){
			actionItem_showSquad = new ActionItem();
			actionItem_showSquad.setIcon(getResources().getDrawable(R.drawable.ic_squad_quickaction));
			actionItem_showSquad.setTitle("Escalação");
			actionItem_showSquad.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					Intent it = new Intent(v.getContext(), RealTimeMatchSquadActivity.class);
					it.putExtra(RealTimeMatchSquadActivity.INTENT_REALTIMEMATCH, getRealTimeMatch());
					quickaction.dismiss();
					v.getContext().startActivity(it);
				}
			});
			
			quickaction.addActionItem(actionItem_showSquad);
		}
		
		setQuickActionVideoCentralButton(quickaction);
		
		if(state == RealTimeMatch.A_INICIAR || state == RealTimeMatch.EM_ANDAMENTO){
			actionItem_followMatch = new ActionItem();
			actionItem_followMatch.setIcon(getResources().getDrawable(R.drawable.ic_alert_quickaction));
			
			RealTimeMatch bkp = (RealTimeMatch) FileHandler.openBackup(this, FileHandler.FOLLOWEDREALTIMEMATCH);
			if(bkp != null && bkp.toString().equals(getRealTimeMatch().toString())){
				actionItem_followMatch.setTitle("Não acompanhar");
				actionItem_followMatch.setOnClickListener(new OnClickListener() {
					@Override
					public void onClick(View v) {
						Intent it = new Intent(v.getContext(), RealTimeMatchService.class);
						v.getContext().stopService(it);
						FileHandler.saveBackup(v.getContext(), FileHandler.FOLLOWEDREALTIMEMATCH, new RealTimeMatch());
						quickaction.dismiss();
						Toast.makeText(v.getContext(), "Você não está mais acompanhando a partida.", Toast.LENGTH_SHORT).show();
					}
				});
			}else{
				actionItem_followMatch.setTitle("Acompanhar");
				actionItem_followMatch.setOnClickListener(new OnClickListener() {
					@Override
					public void onClick(View v) {
						Intent it = new Intent(v.getContext(), RealTimeMatchService.class);
						if(RealTimeMatchesActivity.isMyServiceRunning(v.getContext())) v.getContext().stopService(it);
						FileHandler.saveBackup(v.getContext(), FileHandler.FOLLOWEDREALTIMEMATCH, getRealTimeMatch());
						v.getContext().startService(it);
						quickaction.dismiss();
					}
				});
			}
			
			quickaction.addActionItem(actionItem_followMatch);
		}
	}
	
	private void setQuickActionVideoCentralButton(QuickAction qa){
		actionItem_videoCentral = new ActionItem();
		actionItem_videoCentral.setIcon(getResources().getDrawable(R.drawable.ic_video_quickaction));
		actionItem_videoCentral.setTitle("Vídeos");
		actionItem_videoCentral.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				MoveToMoveAdapter mtmadapter = ((MoveToMoveAdapter) getListAdapter());
				if(mtmadapter != null && mtmadapter.getCount() > 0){					
					Intent it = new Intent(v.getContext(), MoveToMoveVideoCentralActivity.class);
					it.putExtra(MoveToMoveVideoCentralActivity.INTENT_MOVES, mtmadapter.getMoves());
					v.getContext().startActivity(it);
				}else{
					Toast.makeText(v.getContext(), "Não há vídeos para exibição no momento.", Toast.LENGTH_SHORT).show(); //TODO sera que eh melhor sumir com o botao ao inves de dar a msg?
				}
			}
		});
		
		qa.addActionItem(actionItem_videoCentral);
	}
	
	public RealTimeMatch getRealTimeMatch() {
		return rtmatch;
	}

	public void setRealTimeMatch(RealTimeMatch rtmatch) {
		this.rtmatch = rtmatch;
	}

	@SuppressWarnings("unused")
	private void addToAdapterStart(Move move){
		LinkedHashMap<String, Move> newMap = new LinkedHashMap<String, Move>();
		newMap.put(String.valueOf(move.getId()), move);
		newMap.putAll(((MoveToMoveAdapter) getListAdapter()).getMoves());
		setListAdapter(new MoveToMoveAdapter(this, newMap));
	}
	
	private void addToAdapterStart(ArrayList<Move> moves){
		LinkedHashMap<String, Move> newMap = new LinkedHashMap<String, Move>();
		for (Move mv : moves) {
			newMap.put(String.valueOf(mv.getId()), mv);
		}
		newMap.putAll(((MoveToMoveAdapter) getListAdapter()).getMoves());
		setListAdapter(new MoveToMoveAdapter(this, newMap));
	}
	
	private void checkForGoals(ArrayList<Move> moves) {
		for (Move move : moves) {
			if(move.getTipo() == Move.TIPO_LANCEGOL){
				if(move.getNome_time().equals(match.getHome().getName())){
					int score = Integer.valueOf(scrH.getText().toString());
					score++;
					scrH.setText(String.valueOf(score));
				}else if(move.getNome_time().equals(match.getAway().getName())){
					int score = Integer.valueOf(scrA.getText().toString());
					score++;
					scrA.setText(String.valueOf(score));
				}
			}
		}
	}
	
	private class MoveToMoveOpenTask extends AsyncTask<Void, Void, LinkedHashMap<String, Move>> {
		private Context context;
		
		public MoveToMoveOpenTask(Context context) {
			setContext(context);
		}
		
		@Override
		protected void onPreExecute() {
			tv_progressbar.setText("Atualizando...");
			pb_progressbar.setVisibility(View.VISIBLE);
			pb_actionbar_progressbar.setVisibility(View.VISIBLE);
			rl_loading.setVisibility(View.VISIBLE);
			super.onPreExecute();
		}
		
		@Override
		protected LinkedHashMap<String, Move> doInBackground(Void... params) {
			try {
				return HTMLManager.getRealTimeMatchMoveToMove(getContext(), match);
			} catch (JSONException e) {
				e.printStackTrace();
				return null;
			}
		}
		
		@Override
		protected void onPostExecute(LinkedHashMap<String, Move> result) {
			pb_progressbar.setVisibility(View.GONE);
			pb_actionbar_progressbar.setVisibility(View.GONE);
			if(result == null){
				tv_progressbar.setText("Não foi possível ler o lance a lance da partida.");
			}else{
				if(result.size() > 0){					
					rl_loading.setVisibility(View.GONE);
					setListAdapter(new MoveToMoveAdapter(getContext(), result));
				}else{
					tv_progressbar.setText("A partida ainda não tem lances registrados.");
				}
			}
			super.onPostExecute(result);
		}

		public Context getContext() {
			return context;
		}

		public void setContext(Context context) {
			this.context = context;
		}
	}
	
	private class MoveToMoveUpdateTask extends AsyncTask<Void, Void, ArrayList<Move>> {
		private Context context;
		private String lastId;
		private Match match;
		
		public MoveToMoveUpdateTask(Context context, String lastId, Match match) {
			setContext(context);
			setLastId(lastId);
			setMatch(match);
		}
		
		@Override
		protected void onPreExecute() {
			ll_actionbar_loading.setVisibility(View.VISIBLE);
			pb_actionbar_progressbar.setVisibility(View.VISIBLE);
			super.onPreExecute();
		}
		
		@Override
		protected ArrayList<Move> doInBackground(Void... params) {
			try {
				return HTMLManager.getUpdatedMoves(getContext(), getLastId(), getMatch());
			} catch (JSONException e) {
				e.printStackTrace();
				return null;
			}
		}
		
		@Override
		protected void onPostExecute(ArrayList<Move> result) {
			if(result != null){
				if(result.size() > 0){					
					if(scrH.getText().toString().equals("") && scrA.getText().toString().equals("")){
						scrH.setText("0");
						scrA.setText("0");
					}
					addToAdapterStart(result);
					checkForGoals(result);
				}
			}
			ll_actionbar_loading.setVisibility(View.GONE);
			pb_actionbar_progressbar.setVisibility(View.GONE);
			super.onPostExecute(result);
		}

		public Context getContext() {
			return context;
		}

		public void setContext(Context context) {
			this.context = context;
		}

		public String getLastId() {
			return lastId;
		}

		public void setLastId(String lastId) {
			this.lastId = lastId;
		}
		
		public Match getMatch() {
			return match;
		}

		public void setMatch(Match m) {
			this.match = m;
		}
	}
	
	private class MoveToMoveAdapter extends BaseAdapter {
		private Context context;
		private TreeMap<String, MoveToMoveLayout> cache;
		private LayoutInflater layoutInflater;
		private LinkedHashMap<String, Move> moves;
		
		public MoveToMoveAdapter(Context context, LinkedHashMap<String, Move> moves) {
			this.context = context;
			this.moves = moves;
			layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			cache = new TreeMap<String, MoveToMoveLayout>();
		}
		
		@Override
		public int getCount() {
			return moves.size();
		}
		
		public LinkedHashMap<String, Move> getMoves() {
			return moves;
		}
		
		public String getLastIdEntered(){
			Move move = (Move) getItem(0);
			if(move != null) return String.valueOf(move.getId());
			else return null;
		}

		@SuppressWarnings("unused")
		public void updateMove(Move move){
			cache.put(String.valueOf(move.getId()), new MoveToMoveLayout(context, layoutInflater, move));
			moves.put(String.valueOf(move.getId()), move);
			notifyDataSetChanged();
		}

		@Override
		public Object getItem(int position) {
			int i = 0;
			for (Iterator<Move> it = moves.values().iterator(); it.hasNext();) {
				Move move = (Move) it.next();
				if(position == i) return move;
				else i++;
			}
			return null;
		}
		
		@SuppressWarnings("unused")
		public Move getMove(int id){
			return moves.get(String.valueOf(id));
		}

		@Override
		public long getItemId(int position) {
			return 0;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			Move move = (Move) getItem(position);
			MoveToMoveLayout mtmlt = cache.get(String.valueOf(move.getId()));
			if(mtmlt == null){
				mtmlt = new MoveToMoveLayout(context, layoutInflater, move);
				cache.put(String.valueOf(move.getId()), mtmlt);
			}
			return mtmlt;
		}
	}
}