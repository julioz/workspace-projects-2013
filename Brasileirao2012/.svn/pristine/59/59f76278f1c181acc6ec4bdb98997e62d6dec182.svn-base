package br.com.zynger.brasileirao2012.web;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.LinkedHashMap;
import java.util.TreeMap;

import org.json.JSONException;
import org.json.JSONObject;
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import android.content.Context;
import android.util.Log;
import android.util.SparseArray;
import br.com.zynger.brasileirao2012.model.Article;
import br.com.zynger.brasileirao2012.model.Club;
import br.com.zynger.brasileirao2012.model.Match;
import br.com.zynger.brasileirao2012.model.Move;
import br.com.zynger.brasileirao2012.model.RealTimeMatch;
import br.com.zynger.brasileirao2012.model.RealTimePlayer;
import br.com.zynger.brasileirao2012.model.Striker;
import br.com.zynger.brasileirao2012.rest.AprovREST;
import br.com.zynger.brasileirao2012.rest.MatchesREST;
import br.com.zynger.brasileirao2012.rest.MoveToMoveREST;
import br.com.zynger.brasileirao2012.rest.RankingREST;
import br.com.zynger.brasileirao2012.rest.RealTimeREST;
import br.com.zynger.brasileirao2012.rest.StrikersREST;
import br.com.zynger.brasileirao2012.util.DeviceUUIDFactory;
import br.com.zynger.brasileirao2012.util.FileHandler;

public class HTMLManager {

	private static final int MAX_RODADA = 38;

	public static TreeMap<String, Club> getRanking(TreeMap<String, Club> clubs, int division) {
		try {
			RankingREST cliREST = new RankingREST();
			ArrayList<Club> al = cliREST.getRanking(division);
			for (Club club : al) {
				Club c = clubs.get(club.getName());
				club.setAprov(c.getAprov());
				club.setFullName(c.getFullName());
				club.setWiki(c.getWiki());
				c.clone(club);
			}
			return clubs;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	public static ArrayList<Striker> getStrikers(int division) {
		try {
			StrikersREST cliREST = new StrikersREST();
			return cliREST.getStrikers(division);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	public static TreeMap<String, Club> getAprov(int division, TreeMap<String, Club> clubs) {
		try {
			AprovREST cliREST = new AprovREST();
			return cliREST.getAprov(division, clubs);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
    private static SparseArray<GregorianCalendar> getFixtureDates(int division){
    	try{    		
    		MatchesREST cliRest = new MatchesREST();
    		return cliRest.getFixtureDates(division);
    	}catch(Exception e){
    		e.printStackTrace();
    		return null;
    	}
    }
    
    public static TreeMap<Integer, ArrayList<Match>> getMatchesDatabase(int division, TreeMap<String, Club> clubs) {
    	try{
    		MatchesREST cliRest = new MatchesREST();
    		return cliRest.getMatches(division, clubs);
    	}catch(Exception e){
    		e.printStackTrace();
    		return null;
    	}
    }
    
	@SuppressWarnings("unchecked")
	public static TreeMap<Integer, ArrayList<Match>> getTableData(Context c, int division, TreeMap<String, Club> clubs) throws IOException{
		TreeMap<Integer, ArrayList<Match>> tm = new TreeMap<Integer, ArrayList<Match>>();
		TreeMap<Integer, ArrayList<Match>> matches = null;
		
		matches = (TreeMap<Integer, ArrayList<Match>>) FileHandler.openBackup(c, FileHandler.MATCHES, division);
		if(matches == null) return HTMLManager.getMatchesDatabase(division, clubs);
		
		SparseArray<GregorianCalendar> rod_dates = (SparseArray<GregorianCalendar>) FileHandler.openBackup(c, FileHandler.MATCHES_DATES, division);
		if(rod_dates == null){
			rod_dates = getFixtureDates(division);
			if(rod_dates != null) FileHandler.saveBackup(c, FileHandler.MATCHES_DATES, rod_dates, division);
			else throw new IOException("Não foi possível fazer o donwload do mapa de datas da divisao " + division);
		}
		//TODO SparseArray não é serializavel
		
		Calendar today = new GregorianCalendar();
		
		for (int rodada = MAX_RODADA; rodada >= 1; rodada--) {
			Calendar date = rod_dates.get(rodada);
			
			if(today.compareTo(date) == -1 || today.compareTo(date) == 0){ // nao preciso tentar atualizar as partidas que ainda nao aconteceram
				tm.put(rodada, matches.get(rodada));
				continue;
			}else{
				if(isFixtureDone(matches, rodada)){ //se a rodada ja passou e ja tenho no banco o resultado das partidas, nao preciso atualizar novamente
					tm.put(rodada, matches.get(rodada));
					continue;
				}
				
				ArrayList<Match> al = parseTableOfMatches(division, rodada, clubs);
				if(al != null){					
					tm.remove(rodada);
					tm.put(rodada, al);
				}				
			}
		}
		
		for (int i = 38; i > tm.size(); i--) {
			tm.put(i, matches.get(i)); //adicionar ao TreeMap as rodadas que nao precisaram ser atualizadas
		}
		
		if(tm.size() == 38) return tm;
		else return null;
	}
	
	private static boolean isFixtureDone(TreeMap<Integer, ArrayList<Match>> matches, int rodada){
		ArrayList<Match> test_score = matches.get(rodada);
		int counter = 0;
		for (Match m : test_score) {
			if(m.isFinished()) counter++;
		}
		
		return (counter == 10); //se a rodada ja passou e ja tenho no banco o resultado das partidas, nao preciso atualizar novamente
	}
	
	private static ArrayList<Match> parseTableOfMatches(int division, int rodada, TreeMap<String, Club> clubs){
		try{			
			MatchesREST cliRest = new MatchesREST();
			ArrayList<Match> al = cliRest.getMatches(division, rodada, clubs);
			return al;
		}catch(Exception e){
			e.printStackTrace();
			return null;
		}
	}

	public static String getVersionAtMarket() throws IOException{
		Document document = Jsoup.connect("https://play.google.com/store/apps/details?id=br.com.zynger.brasileirao2012").get();
		
		Elements els = document.getElementsByAttributeValue("itemprop", "softwareVersion");
		
		return els.get(0).text();
	}

	public static String[] getNewsDetailsContent(String serverId, String newsurl) throws JSONException{
		String url = "http://electric-stream-5784.herokuapp.com/news?domain=" + serverId + "&url=" + newsurl;
		String[] result = new String[2];
		JSONObject json = new JSONObject(JsonUtil.readJsonFeed(url));
		try{
			result[0] = json.getString("imgsrc");
			if(result[0].equals("null")) result[0] = null;
		}catch(JSONException e){
			result[0] = null;
		}
		result[1] = json.getString("content");
		if(result[1].equals("")) throw new RuntimeException();
		return result;
	}
	
	public static String getNewsContent(String newsurl, int domain) {
		System.gc();
		
		try{
			if(domain == Article.GLOBO){
				Connection connect = Jsoup.connect(newsurl);
				Connection.Response response = connect.execute();
				String html = response.body();
				int closureNode = html.indexOf("<div class=\"barra-ferramentas\">");
				html = html.substring(0, closureNode);
				html += "</body></head>";
				
				Document doc = Jsoup.parse(html);
				Element div = doc.getElementById("materia-letra");
				
				Elements paragraph = div.getElementsByTag("p");
				
				String ret = "";
				for (Element el : paragraph) {
					ret += el.html()+"<br /><br />";
				}
				ret = ret.substring(0, ret.length()-"<br /><br />".length());
				
				return ret;
			}else if(domain == Article.UOL){
				String url = "http://electric-stream-5784.herokuapp.com/news?domain=" + "uol" + "&url=" + newsurl;
				JSONObject json = new JSONObject(JsonUtil.readJsonFeed(url));
				Log.e("bras2012", json.getString("imgsrc"));
				return json.getString("content");
			}else if (domain == Article.GOOGLE){
				//Nao deveria entrar aqui em hipotese alguma, se entrou, tivemos algum erro
				return "Não foi possível ler a notícia";
			}
			return "Não foi possível ler a notícia";
		}catch(Exception e){
			Log.e("bras2012", e.toString());
			e.printStackTrace();
			return "Não foi possível ler a notícia, abra-a no browser clicando em \"Abrir Página\".";
		}catch(OutOfMemoryError oom){
			System.gc();
			Log.e("bras2012", oom.toString());
			oom.printStackTrace();
			return "Não foi possível ler a notícia, abra-a no browser clicando em \"Abrir Página\".";
		}
	}	

	public static TreeMap<String, Club> updateFansData(Context context, TreeMap<String, Club> clubs, String myteam){
		try{
			String url = "http://electric-stream-5784.herokuapp.com/users/get_statistics";
			JSONObject json = new JSONObject(JsonUtil.readJsonFeed(url));
			
			for (Club club : clubs.values()) {
				try{
					int fans = json.getInt(club.getAcronym());
					club.setFans(fans);
				}catch(JSONException e){
					club.setFans(0);
				}
			}
			
			sendMyTeamToServer(context, myteam);			
			return clubs;
		}catch(JSONException jse){
			Log.e("bras2012", jse.toString());
			jse.printStackTrace();
			return null;
		}catch(Exception e){
			return null;
		}
	}
	
	public static JSONObject sendMyTeamToServer(Context context, String myteam){
		String sentClub = (String) FileHandler.openBackup(context, FileHandler.TORCIDOMETER_SENT_CLUB);
		
		if(sentClub == null || !sentClub.equals(myteam)){
			try{
				String uuid = new DeviceUUIDFactory(context).getDeviceUuid().toString();
				String url = "http://electric-stream-5784.herokuapp.com/users/set_team?user[uid]="+uuid+"&user[team]="+myteam;
				
				JSONObject json = new JSONObject(JsonUtil.readJsonFeed(url));
				FileHandler.saveBackup(context, FileHandler.TORCIDOMETER_SENT_CLUB, myteam);
				return json;
			}catch(JSONException jse){
				Log.e("bras2012", jse.toString());
				jse.printStackTrace();
				return null;
			}catch(Exception e){
				return null;
			}catch(OutOfMemoryError e){
				e.printStackTrace();
				return null;
			}
		}else{
			return new JSONObject();
		}
	}
	
	public static ArrayList<RealTimeMatch> getRealTimeMatches(int division){
		try {
			RealTimeREST cliREST = new RealTimeREST();
			ArrayList<RealTimeMatch> al = cliREST.getRealTimeMatches(division);
			return al;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	public static LinkedHashMap<String, Move> getRealTimeMatchMoveToMove(Context context, Match m) throws JSONException{
		MoveToMoveREST cliRest = new MoveToMoveREST();
		return cliRest.getRealTimeMatchMoveToMove(context, m);
	}
	
	public static ArrayList<Move> getUpdatedMoves(Context c, String lastId, Match match) throws JSONException{
		MoveToMoveREST cliRest = new MoveToMoveREST();
		return cliRest.getUpdatedMoves(c, lastId, match);
	}
	
	public static LinkedHashMap<String, ArrayList<RealTimePlayer>> getRealTimeSquad(Context c, RealTimeMatch rtm) throws IOException{
		String url = rtm.getUrlDetails();
		
		LinkedHashMap<String, ArrayList<RealTimePlayer>> map = new LinkedHashMap<String, ArrayList<RealTimePlayer>>();
		
		Document doc = Jsoup.connect(url).timeout(15*1000).get();
		Element div_escalacao = doc.getElementById("escalacao");
		
		Elements times = div_escalacao.getElementsByClass("time");
		
		try{			
			Element timeHome = times.get(0);
			Element timeAway = times.get(1);
			
			ArrayList<RealTimePlayer> home = parseRealTimeSquad(timeHome.getElementsByTag("tbody").get(0));
			ArrayList<RealTimePlayer> away = parseRealTimeSquad(timeAway.getElementsByTag("tbody").get(0));
			map.put(timeHome.getElementsByTag("p").get(0).text(), home);
			map.put(timeAway.getElementsByTag("p").get(0).text(), away);
			
			if(home.size() == 0 || away.size() == 0) return null;
		} catch(IndexOutOfBoundsException e){
			map = null;
		}
		
		return map;
	}

	private static ArrayList<RealTimePlayer> parseRealTimeSquad(Element tbody) {
		Elements trs = tbody.getElementsByTag("tr");
		ArrayList<RealTimePlayer> al = new ArrayList<RealTimePlayer>();
		
		for (Element tr : trs) {
			String typeClass = tr.className();
			
			int type = RealTimePlayer.TIPO_TITULAR;
			if(typeClass.equals("tr-titulares")) type = RealTimePlayer.TIPO_TITULAR;
			else if(typeClass.equals("tr-substituicao")) type = RealTimePlayer.TIPO_SUBSTITUICAO;
			else if(typeClass.equals("tr-reservas")) type = RealTimePlayer.TIPO_RESERVA;
			else if(typeClass.equals("tr-expulso")) type = RealTimePlayer.TIPO_EXPULSO;
			
			Elements td = tr.getElementsByTag("td");
			
			String subst = null;
			int subst_type = RealTimePlayer.NULL;
			if(td.get(0).children().size() > 0){
				subst = td.get(0).getElementsByTag("img").get(0).attr("alt");
				if(subst.toLowerCase().equals("saiu")) subst_type = RealTimePlayer.SUBST_SAIU;
				else if(subst.toLowerCase().equals("entrou")) subst_type = RealTimePlayer.SUBST_ENTROU;
				else if(subst.toLowerCase().equals("expulso")) subst_type = RealTimePlayer.SUBST_EXPULSO;
			}
			
			String name = td.get(1).text();
			
			String cartao = null;
			int card_type = RealTimePlayer.NULL;
			if(td.get(2).children().size() > 0){
				cartao = td.get(2).getElementsByTag("img").get(0).attr("alt");
				if(cartao.toLowerCase().equals("cartão amarelo")) card_type = RealTimePlayer.CARTAO_AMAR;
				else if(cartao.toLowerCase().equals("cartão vermelho")) card_type = RealTimePlayer.CARTAO_VERM;
			}
			
			String gp = td.get(3).text();
			String gc = td.get(4).text();
			
			int goalspro;
			try{				
				goalspro = Integer.parseInt(gp);
			}catch(NumberFormatException e){
				goalspro = RealTimePlayer.NULL;
			}
			
			int goalsagainst;
			try{				
				goalsagainst = Integer.parseInt(gc);
			}catch(NumberFormatException e){
				goalsagainst = RealTimePlayer.NULL;
			}
			
			RealTimePlayer rtp = new RealTimePlayer(name, type, subst_type, card_type, goalspro, goalsagainst);
			al.add(rtp);
		}
		
		return al;
	}
}