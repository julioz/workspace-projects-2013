package br.com.zynger.brasileirao2012.movetomove;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeMap;

import org.json.JSONArray;

import android.content.Intent;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Toast;
import br.com.zynger.brasileirao2012.HomeActivity;
import br.com.zynger.brasileirao2012.R;
import br.com.zynger.brasileirao2012.RealTimeMatchSquadActivity;
import br.com.zynger.brasileirao2012.RealTimeMatchesActivity;
import br.com.zynger.brasileirao2012.asynctasks.UpdateMoveToMoveTask;
import br.com.zynger.brasileirao2012.model.Club;
import br.com.zynger.brasileirao2012.model.Match;
import br.com.zynger.brasileirao2012.model.Move;
import br.com.zynger.brasileirao2012.model.RealTimeMatch;
import br.com.zynger.brasileirao2012.service.RealTimeMatchService;
import br.com.zynger.brasileirao2012.util.PreferenceEditor;
import br.com.zynger.brasileirao2012.view.QuickAction;

public class RealTimeMoveToMoveActivity extends MoveToMoveActivity {
	private final int SECOND = 1000;
	private final int UPDATE_INTERVAL = 90 * SECOND;

	private Timer timer;

	@Override
	public Match getMatchFromJsonArray(JSONArray json,
			TreeMap<String, Club> clubs) {
		return new RealTimeMatch(json, clubs);
	}

	@Override
	public void setQuickAction(QuickAction quickAction) {
		setRealTimeQuickAction(quickAction, getMatch());
	}

	@Override
	protected void onResume() {
		if (timer != null)
			timer.cancel();
		startRecorrentTask();
		super.onResume();
	}

	@Override
	protected void onStop() {
		if (timer != null)
			timer.cancel();
		super.onStop();
	}

	private void startRecorrentTask() {
		TimerTask doAsynchronousTask;
		final Handler handler = new Handler();
		timer = new Timer();

		doAsynchronousTask = new TimerTask() {
			@Override
			public void run() {
				handler.post(new Runnable() {
					public void run() {
						if (adapter != null && dul_loading.isHidden()) {
							new UpdateMoveToMoveTask(
									RealTimeMoveToMoveActivity.this, clubs, match,
									adapter.getMoves(), adapter.getLastIdEntered(),
									RealTimeMoveToMoveActivity.this).execute();
						}
					}
				});
			}
		};

		timer.schedule(doAsynchronousTask, 0, UPDATE_INTERVAL);
	}

	private void addToAdapterStart(ArrayList<Move> moves) {
		Collections.reverse(moves);
		for (Move move : moves) {
			adapter.insert(move, 0);
		}
		adapter.notifyDataSetChanged();
	}

	private void checkForGoals(ArrayList<Move> moves) {
		for (Move move : moves) {
			if (move.getTipo() == Move.Type.GOAL) {
				if (move.getNome_time().equals(match.getHome().getName())) {
					setScoreHome(getScoreHome() + 1);
				} else if (move.getNome_time().equals(match.getAway().getName())) {
					setScoreAway(getScoreAway() + 1);
				}
			}
		}
	}

	private void setRealTimeQuickAction(final QuickAction quickAction,
			final RealTimeMatch rtm) {
		if (rtm.hasSquadDetails()) {
			addSquadActionItem(quickAction, rtm);
		}

		super.setQuickAction(quickAction);

		if (rtm.getState() == RealTimeMatch.State.TO_START
				|| rtm.getState() == RealTimeMatch.State.IN_PROGRESS) {			
			if (rtm.equals(getRealTimeMatchFromInternalStorage())) {
				addUnfollowActionItem(quickAction);
			} else {
				addFollowActionItem(quickAction, rtm);
			}
		}
	}

	private RealTimeMatch getRealTimeMatchFromInternalStorage() {
		RealTimeMatch realTimeMatch = null;
		try {
			String json = PreferenceEditor.getFollowedRealTimeMatchJson(this);
			if (json != null) {
				realTimeMatch = new RealTimeMatch(new JSONArray(json), clubs);
			}
		} catch (Exception e) {
			Log.e(HomeActivity.TAG, e.toString());
			e.printStackTrace();
		}
		return realTimeMatch;
	}

	private void addSquadActionItem(final QuickAction quickAction,
			final RealTimeMatch rtm) {
		addToQuickAction(quickAction, R.drawable.ic_squad_quickaction,
				R.string.movetomoveactivity_squad, new OnClickListener() {
					@Override
					public void onClick(View v) {
						Intent it = new Intent(v.getContext(),
								RealTimeMatchSquadActivity.class);
						it.putExtra(
								RealTimeMatchSquadActivity.INTENT_REALTIMEMATCH,
								rtm.toJson().toString());
						quickAction.dismiss();
						v.getContext().startActivity(it);
					}
				});
	}

	private void addFollowActionItem(final QuickAction quickAction,
			final RealTimeMatch rtm) {
		addToQuickAction(quickAction, R.drawable.ic_alert_quickaction,
				R.string.movetomoveactivity_follow,
				new OnClickListener() {
					@Override
					public void onClick(View v) {
						Intent it = new Intent(v.getContext(),
								RealTimeMatchService.class);
						if (RealTimeMatchesActivity
								.isMyServiceRunning(v.getContext()))
							v.getContext().stopService(it);
						it.putExtra(
								RealTimeMatchService.INTENT_REALTIMEMATCH_JSON,
								rtm.toJson().toString());
						v.getContext().startService(it);
						quickAction.dismiss();
					}
				});
	}

	private void addUnfollowActionItem(final QuickAction quickAction) {
		addToQuickAction(quickAction, R.drawable.ic_alert_quickaction,
				R.string.movetomoveactivity_dontfollow,
				new OnClickListener() {
					@Override
					public void onClick(View v) {
						Intent it = new Intent(v.getContext(),
								RealTimeMatchService.class);
						v.getContext().stopService(it);
						PreferenceEditor.setFollowedRealTimeMatchJson(
								v.getContext(), null);
						quickAction.dismiss();
						Toast.makeText(
								v.getContext(),
								getString(R.string.movetomoveactivity_nolongerfollowing),
								Toast.LENGTH_SHORT).show();
					}
				});
	}

	@Override
	public void onNewMovesParsed(ArrayList<Move> moves) {
		if (moves.size() > 0) {
			setZeroedScoreIfNeeded();
			addToAdapterStart(moves);
			checkForGoals(moves);
		}
	}

	@Override
	public RealTimeMatch getMatch() {
		return (RealTimeMatch) match;
	}
}
