package br.com.zynger.libertadores;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Locale;
import java.util.TreeMap;

import org.json.JSONArray;
import org.json.JSONException;

import android.app.ListActivity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ListView;
import android.widget.Toast;
import br.com.zynger.libertadores.adapters.MatchesListAdapter;
import br.com.zynger.libertadores.asynctasks.AsyncTaskListener;
import br.com.zynger.libertadores.asynctasks.GetAllMatchesTask;
import br.com.zynger.libertadores.data.ClubsDB;
import br.com.zynger.libertadores.enums.Phase;
import br.com.zynger.libertadores.model.Club;
import br.com.zynger.libertadores.model.Match;
import br.com.zynger.libertadores.util.GroupEnum;
import br.com.zynger.libertadores.util.InternalStorageHandler;
import br.com.zynger.libertadores.util.JsonUtil;
import br.com.zynger.libertadores.view.DataUpdateLayout;
import br.com.zynger.libertadores.view.HelveticaTextView;
import br.com.zynger.libertadores.view.UpdateImageView;
import br.com.zynger.libertadores.web.MatchesParser;

public class MatchesOrderedListActivity extends ListActivity implements AsyncTaskListener {

	private ClubsDB clubsDB;
	private TreeMap<String, Club> clubs;
	private InternalStorageHandler internalStorage;
	
	private MatchesParser matchesParser;
	
	private ArrayList<Match> matches;
	
	private DataUpdateLayout dul_update;
	private UpdateImageView uiv_update;
	private HelveticaTextView tv_title;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.matchesorderedlistactivity);
		
		clubsDB = ClubsDB.getSingletonObject(this);
		internalStorage = new InternalStorageHandler(this);
		clubs = clubsDB.getClubs();
		
		matchesParser = new MatchesParser(this, clubs);
		
		loadViews();
		
		uiv_update.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				new GetAllMatchesTask(matchesParser, MatchesOrderedListActivity.this).execute();
			}
		});
		
		matches = restoreBackup();
		if(null != matches) setAdapterFromMatches();
		else new GetAllMatchesTask(matchesParser, MatchesOrderedListActivity.this).execute();
	}
	
	private void loadViews() {
		dul_update = (DataUpdateLayout) findViewById(R.matchesorderedlistactivity.dul_update);
		dul_update.addViewToToggle(getListView());
		tv_title = (HelveticaTextView) findViewById(R.matchesorderedlistactivity.titlebar_tvtitle);
		uiv_update = (UpdateImageView) findViewById(R.matchesorderedlistactivity.titlebar_ivupdate);
		
		tv_title.setText(getString(R.string.matchesorderedlistactivity_nextmatches).toUpperCase(Locale.getDefault()));
	}
	
	protected void onListItemClick(ListView l, View v, int position, long id) {
		if(l.getAdapter() instanceof MatchesListAdapter){			
			Match match = (Match) l.getAdapter().getItem(position);
			String detailsUrl = match.getDetailsUrl();
			if(null != detailsUrl){
				if(match.getHome().getCountry() == Club.COUNTRY_BRAZIL ||
						match.getAway().getCountry() == Club.COUNTRY_BRAZIL){
					Intent i = new Intent(this, MoveToMoveActivity.class);
					i.putExtra(MoveToMoveActivity.INTENT_MATCH, match.toJson().toString());
					v.getContext().startActivity(i);
				}else{
					Intent i = new Intent(this, MatchDetailsActivity.class);
					i.putExtra(MatchDetailsActivity.INTENT_MATCH, match.toJson().toString());
					v.getContext().startActivity(i);					
				}
			}
		}
		super.onListItemClick(l, v, position, id);
	}
	
	private ArrayList<Match> restoreBackup() {
		ArrayList<Match> arrMatches = new ArrayList<Match>();
		String prefix = MatchesListActivity.PREFIX_PHASE;
		if(!addMatches(arrMatches, prefix + Phase.PRELIB.getNumber().toString()) ||
				!addMatches(arrMatches, prefix + Phase.ROUNDOF16.getNumber().toString()) ||
				!addMatches(arrMatches, prefix + Phase.QUARTERFINAL.getNumber().toString()) ||
				!addMatches(arrMatches, prefix + Phase.SEMIFINAL.getNumber().toString()) ||
				!addMatches(arrMatches, prefix + Phase.FINAL.getNumber().toString()) ||
				!addMatches(arrMatches, GroupEnum.GROUP_1.toString()) ||
				!addMatches(arrMatches, GroupEnum.GROUP_2.toString()) ||
				!addMatches(arrMatches, GroupEnum.GROUP_3.toString()) ||
				!addMatches(arrMatches, GroupEnum.GROUP_4.toString()) ||
				!addMatches(arrMatches, GroupEnum.GROUP_5.toString()) ||
				!addMatches(arrMatches, GroupEnum.GROUP_6.toString()) ||
				!addMatches(arrMatches, GroupEnum.GROUP_7.toString()) ||
				!addMatches(arrMatches, GroupEnum.GROUP_8.toString())){
			return null;
		}

		return arrMatches;
	}
	
	private boolean addMatches(ArrayList<Match> matches, String identifier) {
		String matchesJsonString = (String) internalStorage.openMatchesArray(identifier);
		if(null != matchesJsonString){
			try{
				JSONArray jsonMatches = new JSONArray(matchesJsonString);
				
				for (int i = 0; i < jsonMatches.length(); i++) {
					JSONArray data = jsonMatches.getJSONArray(i);
					Match match = new Match(data, clubs);
					addMatchIfPossible(matches, match);
				}
				
				return true;
			}catch(JSONException e){
				e.printStackTrace();
				return false;
			}
		} else return false;
	}
	
	@Override
	public void preExecution() {
		dul_update.showFullLayout();
	}

	@SuppressWarnings("unchecked")
	@Override
	public void onComplete(Object result) {
		HashMap<Integer, ArrayList<Match>> matches = (HashMap<Integer, ArrayList<Match>>) result;
		ArrayList<Match> arrMatches = new ArrayList<Match>();
		
		for (Phase phase : Phase.values()) {
			saveMatches(phase.getNumber(), matches.get(phase.getNumber()));
			for (Match match : matches.get(phase)) {				
				addMatchIfPossible(arrMatches, match);
			}
		}
		
		saveMatches(GroupEnum.GROUP_1, matches.get(1));
		saveMatches(GroupEnum.GROUP_2, matches.get(2));
		saveMatches(GroupEnum.GROUP_3, matches.get(3));
		saveMatches(GroupEnum.GROUP_4, matches.get(4));
		saveMatches(GroupEnum.GROUP_5, matches.get(5));
		saveMatches(GroupEnum.GROUP_6, matches.get(6));
		saveMatches(GroupEnum.GROUP_7, matches.get(7));
		saveMatches(GroupEnum.GROUP_8, matches.get(8));
		
		for (int i = 1; i <= 8; i++) {
			for (Match match : matches.get(i)) {
				addMatchIfPossible(arrMatches, match);
			}
		}
		
		dul_update.hide();
		this.matches = arrMatches;
		setAdapterFromMatches();
	}
	
	private void addMatchIfPossible(ArrayList<Match> matches, Match match) {
		if(match.getDate() != null){
			if(match.getScoreHome() == Match.SCORE_NULL
					&& match.getScoreAway() == Match.SCORE_NULL){
				matches.add(match);
			}else if(match.isOver() != null){
				if(!match.isOver().booleanValue()
						&& (match.getScoreHome() != Match.SCORE_NULL
							&& match.getScoreAway() != Match.SCORE_NULL)){
					matches.add(match);
				}
			}else return ;
		}
	}
	
	private void setAdapterFromMatches() {
		Collections.sort(matches, new MatchDateComparator());
		setListAdapter(new MatchesListAdapter(this, matches, false, true));
	}

	private void saveMatches(Integer phase, ArrayList<Match> matches) {
		JSONArray json = JsonUtil.createMatchesJson(matches);
		internalStorage.saveMatchesArray(MatchesListActivity.PREFIX_PHASE + phase.toString(), json.toString());
	}
	
	private void saveMatches(GroupEnum gEnum, ArrayList<Match> matches){
		JSONArray json = JsonUtil.createMatchesJson(matches);
		internalStorage.saveMatchesArray(gEnum.toString(), json.toString());
	}

	@Override
	public void onFail(String message) {
		Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
		if(null != matches){
			setAdapterFromMatches();
			dul_update.hide();
		}else{
			dul_update.setOnlyText(getString(R.string.error_nodatabase));
		}
	}
	
	class MatchDateComparator implements Comparator<Match> {
		@Override
		public int compare(Match lhs, Match rhs) {
			if(lhs.getDate() == null || rhs.getDate() == null) return -1;
			return lhs.getDate().compareTo(rhs.getDate());
		}
		
	}
	
}
