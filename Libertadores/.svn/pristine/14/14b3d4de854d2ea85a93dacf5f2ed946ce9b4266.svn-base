package br.com.zynger.libertadores;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Locale;
import java.util.TreeMap;

import org.json.JSONArray;
import org.json.JSONException;

import android.app.ListActivity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ListView;
import android.widget.Toast;
import br.com.zynger.libertadores.adapters.MatchesListAdapter;
import br.com.zynger.libertadores.asynctasks.AsyncTaskListener;
import br.com.zynger.libertadores.asynctasks.GetMatchesTask;
import br.com.zynger.libertadores.data.ClubsDB;
import br.com.zynger.libertadores.enums.Phase;
import br.com.zynger.libertadores.model.Club;
import br.com.zynger.libertadores.model.Match;
import br.com.zynger.libertadores.util.InternalStorageHandler;
import br.com.zynger.libertadores.util.JsonUtil;
import br.com.zynger.libertadores.view.DataUpdateLayout;
import br.com.zynger.libertadores.view.HelveticaTextView;
import br.com.zynger.libertadores.view.UpdateImageView;
import br.com.zynger.libertadores.web.MatchesParser;

public class MatchesListActivity extends ListActivity implements AsyncTaskListener {

	public static final String PREFIX_PHASE = "PHASE";
	
	public final static String INTENT_PHASESTRING = "matcheslistactivity_phasenum";
	public final static String INTENT_PHASENAME = "matcheslistactivity_phasename";
	
	private Phase phase = Phase.PRELIB;
	
	private InternalStorageHandler internalStorage;
	private ClubsDB clubsDB;
	private TreeMap<String, Club> clubs;
	private MatchesParser matchesParser;
	
	private ArrayList<Match> matches;
	private HashSet<String> nextPhaseClubsAcronyms;
	
	private HelveticaTextView tv_title;
	private DataUpdateLayout dul_update;
	private UpdateImageView uiv_update;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.matcheslistactivity);
		clubsDB = ClubsDB.getSingletonObject(this);
		internalStorage = new InternalStorageHandler(this);
		clubs = clubsDB.getClubs();
		
		
		String phaseString = getIntent().getStringExtra(INTENT_PHASESTRING);
		phase = Phase.valueOf(phaseString == null ? Phase.PRELIB.toString() : phaseString);
		String phaseName = getIntent().getStringExtra(INTENT_PHASENAME);
		matchesParser = new MatchesParser(this, clubs);
		nextPhaseClubsAcronyms = populateNextPhaseClubs();
		
		loadViews();
		
		tv_title.setText(phaseName.toUpperCase(Locale.getDefault()));
		
		uiv_update.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				new GetMatchesTask(matchesParser, MatchesListActivity.this, phase).execute();
			}
		});
		
		matches = restoreBackup(phase);
		if(null != matches) setAdapterFromMatches();
		else new GetMatchesTask(matchesParser, this, phase).execute();
	}

	private void loadViews() {
		tv_title = (HelveticaTextView) findViewById(R.matcheslistactivity.titlebar_tvtitle);
		dul_update = (DataUpdateLayout) findViewById(R.matcheslistactivity.dul_update);
		dul_update.addViewToToggle(getListView());
		uiv_update = (UpdateImageView) findViewById(R.matcheslistactivity.titlebar_ivupdate);
	}
	
	private ArrayList<Match> restoreBackup(Phase phase) {
		String matchesJsonString = (String) internalStorage.openMatchesArray(PREFIX_PHASE + phase.toString());
		if(null != matchesJsonString){
			try{
				ArrayList<Match> matches = new ArrayList<Match>();
				JSONArray jsonMatches = new JSONArray(matchesJsonString);
				
				for (int i = 0; i < jsonMatches.length(); i++) {
					JSONArray data = jsonMatches.getJSONArray(i);
					Match match = new Match(data, clubs);
					matches.add(match);
				}
				
				return matches;
			}catch(JSONException e){
				e.printStackTrace();
				return null;
			}
		} else return null;
	}
	
	@Override
	protected void onListItemClick(ListView l, View v, int position, long id) {
		Match match = (Match) l.getAdapter().getItem(position);
		String detailsUrl = match.getDetailsUrl();
		if(null != detailsUrl && !detailsUrl.equals("null")){
			if(match.getHome().getCountry() == Club.COUNTRY_BRAZIL ||
					match.getAway().getCountry() == Club.COUNTRY_BRAZIL){
				Intent i = new Intent(this, MoveToMoveActivity.class);
				i.putExtra(MoveToMoveActivity.INTENT_MATCH, match.toJson().toString());
				v.getContext().startActivity(i);
			}else{
				Intent i = new Intent(this, MatchDetailsActivity.class);
				i.putExtra(MatchDetailsActivity.INTENT_MATCH, match.toJson().toString());
				v.getContext().startActivity(i);					
			}
			super.onListItemClick(l, v, position, id);
		}
	}
	
	private void setAdapterFromMatches() {
		Collections.sort(matches);
		setListAdapter(new MatchesListAdapter(this, matches, phase, nextPhaseClubsAcronyms));
	}
	
	private HashSet<String> populateNextPhaseClubs() {
		HashSet<String> set = new HashSet<String>();
		
		// Nao preciso checar a proxima fase se for a prelibertadores
		// uma vez que a prox. fase eh a de grupos
		if(phase == Phase.PRELIB) return set;

		Phase nextPhase = phase.getNextPhase();
		if(nextPhase != null){			
			ArrayList<Match> nextPhaseMatches = restoreBackup(nextPhase);
			if(nextPhaseMatches != null){				
				for (Match match : nextPhaseMatches) {
					set.add(match.getHome().getAcronym());
					set.add(match.getAway().getAcronym());
				}
			}
		}
		
		return set;
	}
	
	@Override
	public void preExecution() {
		dul_update.showFullLayout();
	}

	@SuppressWarnings("unchecked")
	@Override
	public void onComplete(Object result) {
		ArrayList<Match> matches = (ArrayList<Match>) result;
		
		JSONArray json = JsonUtil.createMatchesJson(matches);
		internalStorage.saveMatchesArray(PREFIX_PHASE + phase.toString(), json.toString());
		
		this.matches = matches;
		setAdapterFromMatches();
		dul_update.hide();
	}

	@Override
	public void onFail(String message) {
		Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
		if(null != matches){
			setAdapterFromMatches();
			dul_update.hide();
		}else{
			dul_update.setOnlyText(getString(R.string.error_nodatabase));
		}
	}
}
