package br.com.zynger.libertadores.web;

import java.io.IOException;
import java.util.ArrayList;
import java.util.TreeMap;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import android.content.Context;
import android.util.Log;
import br.com.zynger.libertadores.HomeActivity;
import br.com.zynger.libertadores.model.Club;
import br.com.zynger.libertadores.model.Striker;

public class StrikersParser {
	private final String STRIKERS_URL = "http://www.pasionlibertadores.com/df/libertadores/nuevo_goleadores.html";
	
	private Context context;
	private TreeMap<String, Club> clubs;
	private TreeMap<String, Club> nameMap;
	
	private String clubName;
	
	public StrikersParser(Context context, TreeMap<String, Club> clubs) {
		setContext(context);
		setClubs(clubs);
		this.nameMap = new TreeMap<String, Club>();
	}
	
	public ArrayList<Striker> getStrikers() {
		try{			
			Document document = Jsoup.connect(STRIKERS_URL).get();
			Elements goleadores = document.getElementsByClass("goleadores");
			if(goleadores.size() < 1) throw new IOException();
			Element divGoleadores = goleadores.get(0);
			
			Elements tableRows = divGoleadores.getElementsByTag("tr");
			
			ArrayList<Striker> strikers = new ArrayList<Striker>();
			for (Element tr : tableRows) {
				if(!tr.className().equals("title")){
					Elements td = tr.getElementsByTag("td");
					String name = td.get(0).text();
					String clubName = td.get(1).text();
					String jugada = td.get(2).text();
					String cabeza = td.get(3).text();
					String tiroLivre = td.get(4).text();
					String penal = td.get(5).text();
					
					Club club = getClubByName(clubName);
					
					Striker striker = new Striker(name, club);
					striker.setMove(Integer.valueOf(jugada));
					striker.setHeader(Integer.valueOf(cabeza));
					striker.setFoul(Integer.valueOf(tiroLivre));
					striker.setPenalty(Integer.valueOf(penal));
					
					if(striker.getTotalGoals() < 2) break; //TODO
					
					strikers.add(striker);
				}
			}
			
			return strikers;
		}catch(IOException e){
			return null;
		}

	}
	
	private Club getClubByName(String clubName){
		this.clubName = clubName;
		Club club = nameMap.get(clubName);
		if(null != club) return club;
		
		addToMapIfEqual("U. de Chile", "UCH");
		addToMapIfEqual("Defensor Sporting", "DFS");
		//TODO complete database
		club = nameMap.get(clubName);
		if(null != club) return club;
		
		club = clubs.get(clubName.substring(0, 3).toUpperCase());
		if(null != club){
			nameMap.put(clubName, club);
			return club;
		}
		
		for (Club c : clubs.values()) {
			if(c.getName().contains(clubName)){
				club = c;
				nameMap.put(clubName, club);
				return club;
			}
		}
		
		Log.e(HomeActivity.TAG, "****"+clubName);
		return clubs.get("RGA");
	}
	
	private void addToMapIfEqual(String expected, String acronym){
		if(clubName.equals(expected)){
			Club club = clubs.get(acronym);
			nameMap.put(clubName, club);
		}
	}
	
	public Context getContext() {
		return context;
	}
	
	public void setContext(Context context) {
		this.context = context;
	}
	
	public TreeMap<String, Club> getClubs() {
		return clubs;
	}
	
	public void setClubs(TreeMap<String, Club> clubs) {
		this.clubs = clubs;
	}
}
