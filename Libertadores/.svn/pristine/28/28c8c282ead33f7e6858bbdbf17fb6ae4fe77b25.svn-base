package br.com.zynger.libertadores;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.TreeMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.taptwo.android.widget.ViewFlow;
import org.taptwo.android.widget.ViewFlow.ViewSwitchListener;

import android.app.Activity;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Toast;
import br.com.zynger.libertadores.adapters.GroupsActivityViewFlowAdapter;
import br.com.zynger.libertadores.adapters.MatchesListAdapter;
import br.com.zynger.libertadores.adapters.StandingsAdapter;
import br.com.zynger.libertadores.asynctasks.AsyncTaskListener;
import br.com.zynger.libertadores.asynctasks.GetMatchesGroupTask;
import br.com.zynger.libertadores.asynctasks.GetStandingsStatsTask;
import br.com.zynger.libertadores.data.ClubsDB;
import br.com.zynger.libertadores.data.GroupsDB;
import br.com.zynger.libertadores.model.Club;
import br.com.zynger.libertadores.model.Group;
import br.com.zynger.libertadores.model.Match;
import br.com.zynger.libertadores.util.GroupEnum;
import br.com.zynger.libertadores.util.InternalStorageHandler;
import br.com.zynger.libertadores.util.JsonUtil;
import br.com.zynger.libertadores.view.DataUpdateLayout;
import br.com.zynger.libertadores.view.HelveticaTextView;
import br.com.zynger.libertadores.view.UpdateImageView;
import br.com.zynger.libertadores.web.MatchesParser;
import br.com.zynger.libertadores.web.StandingsParser;

public class GroupActivity extends Activity implements AsyncTaskListener {

	public final static String INTENT_GROUPNUM = "INTENT_GROUPNUM";
	
	private ClubsDB clubsDB;
	private TreeMap<String, Club> clubs;
	private GroupsDB groupsDB;
	private InternalStorageHandler internalStorage;
	
	private MatchesParser matchesParser;
	private StandingsParser standingsParser;
	
	private ArrayList<Match> matches;
	
	private Boolean areMatchesShowing;
	
	private Group group;
	
	private GroupEnum gEnum;
	
	private OnItemClickListener matchesClickListener;
	
	private HelveticaTextView tv_title;
	private HelveticaTextView tv_toggle_matches, tv_toggle_standings;
	private DataUpdateLayout dul_update;
	private UpdateImageView uiv_update;
	private ViewFlow viewFlow;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.groupsactivity);
		clubsDB = ClubsDB.getSingletonObject(this);
		clubs = clubsDB.getClubs();
		groupsDB = GroupsDB.getSingletonObject(clubsDB);
		internalStorage = new InternalStorageHandler(this);
		
		matchesParser = new MatchesParser(this, clubs);
		standingsParser = new StandingsParser(clubs, groupsDB.getGroups(), internalStorage);
		
		gEnum = (GroupEnum) getIntent().getSerializableExtra(INTENT_GROUPNUM);
		this.group = groupsDB.getGroups().get(gEnum);
		
		loadViews();
		setListeners();
		
		tv_title.setText(gEnum.toString().replace('_', ' '));
		showMatchesContent();
		setAdapterFromStandings();
	}

	private void loadViews() {
		tv_title = (HelveticaTextView) findViewById(R.groupsactivity.titlebar_tvtitle);
		
		viewFlow = (ViewFlow) findViewById(R.groupsactivity.viewflow);
		viewFlow.setAdapter(new GroupsActivityViewFlowAdapter(this));
		
		dul_update = (DataUpdateLayout) findViewById(R.groupsactivity.dul_update);
		dul_update.addViewToToggle(viewFlow);
		
		uiv_update = (UpdateImageView) findViewById(R.groupsactivity.titlebar_ivupdate);
		tv_toggle_matches = (HelveticaTextView) findViewById(R.groupsactivity.tv_toggle_matches);
		tv_toggle_matches.setText(getString(R.string.homedashboard_matches).toUpperCase());
		tv_toggle_standings = (HelveticaTextView) findViewById(R.groupsactivity.tv_toggle_standings);
		tv_toggle_standings.setText(getString(R.string.homedashboard_standings).toUpperCase());
	}
	
	private void setListeners() {
		viewFlow.setOnViewSwitchListener(new ViewSwitchListener() {
			@Override
			public void onSwitched(View view, int position) {
				if(position == GroupsActivityViewFlowAdapter.MATCHESLISTVIEW_INDEX){
					areMatchesShowing = true;					
				}else{
					areMatchesShowing = false;
				}
				toggleButtonsBackground(areMatchesShowing);
			}
		});
		
		tv_toggle_matches.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				viewFlow.setSelection(GroupsActivityViewFlowAdapter.MATCHESLISTVIEW_INDEX);
				areMatchesShowing = true;
			}
		});
		
		tv_toggle_standings.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				viewFlow.setSelection(GroupsActivityViewFlowAdapter.STANDINGSLISTVIEW_INDEX);
				areMatchesShowing = false;
			}
		});
		
		matchesClickListener = new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> l, View v, int position, long id) {
				if(l.getAdapter() instanceof MatchesListAdapter){			
					Match match = (Match) l.getAdapter().getItem(position);
					if(match.getHome() == null || match.getAway() == null) return;
					String detailsUrl = match.getDetailsUrl();
					if(null != detailsUrl){
						if(match.getHome().getCountry() == Club.COUNTRY_BRAZIL ||
								match.getAway().getCountry() == Club.COUNTRY_BRAZIL){
							Intent i = new Intent(l.getContext(), MoveToMoveActivity.class);
							i.putExtra(MoveToMoveActivity.INTENT_MATCH, match.toJson().toString());
							v.getContext().startActivity(i);
						}else{
							Intent i = new Intent(l.getContext(), MatchDetailsActivity.class);
							i.putExtra(MatchDetailsActivity.INTENT_MATCH, match.toJson().toString());
							v.getContext().startActivity(i);					
						}
					}
				}
			}
		};
		
		uiv_update.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				if(!areMatchesShowing){
					new GetStandingsStatsTask(v.getContext(),
							standingsParser, GroupActivity.this).execute();
				}else{
					new GetMatchesGroupTask(matchesParser,
							GroupActivity.this, group.getAbsoluteNumber()).execute();
				}
			}
		});
	}
	
	private void showMatchesContent() {
		areMatchesShowing = true;
		
		toggleButtonsBackground(areMatchesShowing);
		
		matches = restoreBackup();
		if(null != matches) setAdapterFromMatches();
		else new GetMatchesGroupTask(matchesParser, this, group.getAbsoluteNumber()).execute();
	}
	
	private void showStandingsContent(){
		areMatchesShowing = false;
		toggleButtonsBackground(areMatchesShowing);
		
		setAdapterFromStandings();
	}
	
	private void toggleButtonsBackground(boolean areMatchesShowing) {
		int disabled = 0x3A;
		int enabled = 0xFF;
		if(areMatchesShowing){
			tv_toggle_matches.getBackground().setAlpha(enabled);
			tv_toggle_standings.getBackground().setAlpha(disabled);
		}else{
			tv_toggle_standings.getBackground().setAlpha(enabled);
			tv_toggle_matches.getBackground().setAlpha(disabled);
		}
	}

	private ArrayList<Match> restoreBackup() {
		String matchesJsonString = (String) internalStorage.openMatchesArray(gEnum.toString());
		if(null != matchesJsonString){
			try{
				ArrayList<Match> matches = new ArrayList<Match>();
				JSONArray jsonMatches = new JSONArray(matchesJsonString);
				
				for (int i = 0; i < jsonMatches.length(); i++) {
					JSONArray data = jsonMatches.getJSONArray(i);
					Match match = new Match(data, clubs);
					matches.add(match);
				}
				
				return matches;
			}catch(JSONException e){
				e.printStackTrace();
				return null;
			}
		} else return null;
	}
	
	private void setAdapterFromMatches() {
		Collections.sort(matches);
		GroupsActivityViewFlowAdapter adapter = (GroupsActivityViewFlowAdapter) viewFlow.getAdapter();
		adapter.setMatchesListViewAdapter(new MatchesListAdapter(this, matches), matchesClickListener);
	}
	
	private void setAdapterFromStandings() {
		Collections.sort(group.getClubs(), new ByGroupPositionComparator());
		GroupsActivityViewFlowAdapter adapter = (GroupsActivityViewFlowAdapter) viewFlow.getAdapter();
		adapter.setStandingsListViewAdapter(new StandingsAdapter(this, group.getClubs()));
	}

	public class ByGroupPositionComparator implements Comparator<Club> {
		@Override
		public int compare(Club lhs, Club rhs) {
			if(lhs.getGroupPosition() != null && rhs.getGroupPosition() != null)
				return lhs.getGroupPosition() - rhs.getGroupPosition();
			else return lhs.getName().compareTo(rhs.getName());
		}
	}

	@Override
	public void preExecution() {
		dul_update.showFullLayout();
	}

	@SuppressWarnings("unchecked")
	@Override
	public void onComplete(Object result) {
		if(result instanceof ArrayList<?>){
			ArrayList<?> objects = (ArrayList<?>) result;
			if(objects.get(0) instanceof Match){
				ArrayList<Match> matches = (ArrayList<Match>) result;
				
				JSONArray json = JsonUtil.createMatchesJson(matches);
				internalStorage.saveMatchesArray(gEnum.toString(), json.toString());
				
				this.matches = matches;

				showMatchesContent();
				Toast.makeText(this,
						getString(R.string.success_datadownload), Toast.LENGTH_SHORT).show();
			}else{
				JSONObject json = JsonUtil.createStandingsJson(clubs);
				internalStorage.saveBackup(this,
						InternalStorageHandler.STANDINGS_JSON, json.toString());
				showStandingsContent();
			}
		}
		
		dul_update.hide();
	}

	@Override
	public void onFail(String message) {
		Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
		if(null != matches && areMatchesShowing){
			showMatchesContent();
			dul_update.hide();
		}else if(null != clubs && !areMatchesShowing){
			showStandingsContent();
			toggleButtonsBackground(areMatchesShowing);
			dul_update.hide();
		}else{
			dul_update.setOnlyText(getString(R.string.error_nodatabase));
		}
	}
	
	@Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        viewFlow.onConfigurationChanged(newConfig);
    }
}
